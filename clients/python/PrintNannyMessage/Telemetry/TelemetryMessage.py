# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Telemetry

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class TelemetryMessage(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsTelemetryMessage(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TelemetryMessage()
        x.Init(buf, n + offset)
        return x

    # TelemetryMessage
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TelemetryMessage
    def MessageType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # TelemetryMessage
    def Message(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

def TelemetryMessageStart(builder): builder.StartObject(2)
def TelemetryMessageAddMessageType(builder, messageType): builder.PrependUint8Slot(0, messageType, 0)
def TelemetryMessageAddMessage(builder, message): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(message), 0)
def TelemetryMessageEnd(builder): return builder.EndObject()

import PrintNannyMessage.Telemetry.BoundingBoxes
import PrintNannyMessage.Telemetry.MessageType
import PrintNannyMessage.Telemetry.MonitoringFrame
try:
    from typing import Union
except:
    pass

class TelemetryMessageT(object):

    # TelemetryMessageT
    def __init__(self):
        self.messageType = 0  # type: int
        self.message = None  # type: Union[None, PrintNannyMessage.Telemetry.MonitoringFrame.MonitoringFrameT, PrintNannyMessage.Telemetry.BoundingBoxes.BoundingBoxesT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        telemetryMessage = TelemetryMessage()
        telemetryMessage.Init(buf, pos)
        return cls.InitFromObj(telemetryMessage)

    @classmethod
    def InitFromObj(cls, telemetryMessage):
        x = TelemetryMessageT()
        x._UnPack(telemetryMessage)
        return x

    # TelemetryMessageT
    def _UnPack(self, telemetryMessage):
        if telemetryMessage is None:
            return
        self.messageType = telemetryMessage.MessageType()
        self.message = PrintNannyMessage.Telemetry.MessageType.MessageTypeCreator(self.messageType, telemetryMessage.Message())

    # TelemetryMessageT
    def Pack(self, builder):
        if self.message is not None:
            message = self.message.Pack(builder)
        TelemetryMessageStart(builder)
        TelemetryMessageAddMessageType(builder, self.messageType)
        if self.message is not None:
            TelemetryMessageAddMessage(builder, message)
        telemetryMessage = TelemetryMessageEnd(builder)
        return telemetryMessage
