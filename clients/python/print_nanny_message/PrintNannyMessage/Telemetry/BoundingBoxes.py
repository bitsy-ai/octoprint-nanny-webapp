# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Telemetry

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class BoundingBoxes(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsBoundingBoxes(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = BoundingBoxes()
        x.Init(buf, n + offset)
        return x

    # BoundingBoxes
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # BoundingBoxes
    def Ts(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # BoundingBoxes
    def Image(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from PrintNannyMessage.Telemetry.Image import Image
            obj = Image()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # BoundingBoxes
    def Boxes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 24
            from PrintNannyMessage.Telemetry.Box import Box
            obj = Box()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # BoundingBoxes
    def BoxesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # BoundingBoxes
    def BoxesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # BoundingBoxes
    def EventType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def BoundingBoxesStart(builder): builder.StartObject(4)
def BoundingBoxesAddTs(builder, ts): builder.PrependUint32Slot(0, ts, 0)
def BoundingBoxesAddImage(builder, image): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(image), 0)
def BoundingBoxesAddBoxes(builder, boxes): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(boxes), 0)
def BoundingBoxesStartBoxesVector(builder, numElems): return builder.StartVector(24, numElems, 4)
def BoundingBoxesAddEventType(builder, eventType): builder.PrependInt8Slot(3, eventType, 0)
def BoundingBoxesEnd(builder): return builder.EndObject()

import PrintNannyMessage.Telemetry.Box
import PrintNannyMessage.Telemetry.Image
try:
    from typing import List, Optional
except:
    pass

class BoundingBoxesT(object):

    # BoundingBoxesT
    def __init__(self):
        self.ts = 0  # type: int
        self.image = None  # type: Optional[PrintNannyMessage.Telemetry.Image.ImageT]
        self.boxes = None  # type: List[PrintNannyMessage.Telemetry.Box.BoxT]
        self.eventType = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        boundingBoxes = BoundingBoxes()
        boundingBoxes.Init(buf, pos)
        return cls.InitFromObj(boundingBoxes)

    @classmethod
    def InitFromObj(cls, boundingBoxes):
        x = BoundingBoxesT()
        x._UnPack(boundingBoxes)
        return x

    # BoundingBoxesT
    def _UnPack(self, boundingBoxes):
        if boundingBoxes is None:
            return
        self.ts = boundingBoxes.Ts()
        if boundingBoxes.Image() is not None:
            self.image = PrintNannyMessage.Telemetry.Image.ImageT.InitFromObj(boundingBoxes.Image())
        if not boundingBoxes.BoxesIsNone():
            self.boxes = []
            for i in range(boundingBoxes.BoxesLength()):
                if boundingBoxes.Boxes(i) is None:
                    self.boxes.append(None)
                else:
                    box_ = PrintNannyMessage.Telemetry.Box.BoxT.InitFromObj(boundingBoxes.Boxes(i))
                    self.boxes.append(box_)
        self.eventType = boundingBoxes.EventType()

    # BoundingBoxesT
    def Pack(self, builder):
        if self.image is not None:
            image = self.image.Pack(builder)
        if self.boxes is not None:
            BoundingBoxesStartBoxesVector(builder, len(self.boxes))
            for i in reversed(range(len(self.boxes))):
                self.boxes[i].Pack(builder)
            boxes = builder.EndVector(len(self.boxes))
        BoundingBoxesStart(builder)
        BoundingBoxesAddTs(builder, self.ts)
        if self.image is not None:
            BoundingBoxesAddImage(builder, image)
        if self.boxes is not None:
            BoundingBoxesAddBoxes(builder, boxes)
        BoundingBoxesAddEventType(builder, self.eventType)
        boundingBoxes = BoundingBoxesEnd(builder)
        return boundingBoxes
