# automatically generated by the FlatBuffers compiler, do not modify

# namespace: alert

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Alert(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsAlert(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Alert()
        x.Init(buf, n + offset)
        return x

    # Alert
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Alert
    def EventType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Alert
    def UserId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Alert
    def OctoprintDeviceId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Alert
    def CloudiotDeviceId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # Alert
    def PrintSession(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Alert
    def ClientVersion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Alert
    def ModelVersion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def AlertStart(builder): builder.StartObject(7)
def AlertAddEventType(builder, eventType): builder.PrependUint8Slot(0, eventType, 0)
def AlertAddUserId(builder, userId): builder.PrependUint32Slot(1, userId, 0)
def AlertAddOctoprintDeviceId(builder, octoprintDeviceId): builder.PrependUint32Slot(2, octoprintDeviceId, 0)
def AlertAddCloudiotDeviceId(builder, cloudiotDeviceId): builder.PrependUint64Slot(3, cloudiotDeviceId, 0)
def AlertAddPrintSession(builder, printSession): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(printSession), 0)
def AlertAddClientVersion(builder, clientVersion): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(clientVersion), 0)
def AlertAddModelVersion(builder, modelVersion): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(modelVersion), 0)
def AlertEnd(builder): return builder.EndObject()


class AlertT(object):

    # AlertT
    def __init__(self):
        self.eventType = 0  # type: int
        self.userId = 0  # type: int
        self.octoprintDeviceId = 0  # type: int
        self.cloudiotDeviceId = 0  # type: int
        self.printSession = None  # type: str
        self.clientVersion = None  # type: str
        self.modelVersion = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        alert = Alert()
        alert.Init(buf, pos)
        return cls.InitFromObj(alert)

    @classmethod
    def InitFromObj(cls, alert):
        x = AlertT()
        x._UnPack(alert)
        return x

    # AlertT
    def _UnPack(self, alert):
        if alert is None:
            return
        self.eventType = alert.EventType()
        self.userId = alert.UserId()
        self.octoprintDeviceId = alert.OctoprintDeviceId()
        self.cloudiotDeviceId = alert.CloudiotDeviceId()
        self.printSession = alert.PrintSession()
        self.clientVersion = alert.ClientVersion()
        self.modelVersion = alert.ModelVersion()

    # AlertT
    def Pack(self, builder):
        if self.printSession is not None:
            printSession = builder.CreateString(self.printSession)
        if self.clientVersion is not None:
            clientVersion = builder.CreateString(self.clientVersion)
        if self.modelVersion is not None:
            modelVersion = builder.CreateString(self.modelVersion)
        AlertStart(builder)
        AlertAddEventType(builder, self.eventType)
        AlertAddUserId(builder, self.userId)
        AlertAddOctoprintDeviceId(builder, self.octoprintDeviceId)
        AlertAddCloudiotDeviceId(builder, self.cloudiotDeviceId)
        if self.printSession is not None:
            AlertAddPrintSession(builder, printSession)
        if self.clientVersion is not None:
            AlertAddClientVersion(builder, clientVersion)
        if self.modelVersion is not None:
            AlertAddModelVersion(builder, modelVersion)
        alert = AlertEnd(builder)
        return alert
