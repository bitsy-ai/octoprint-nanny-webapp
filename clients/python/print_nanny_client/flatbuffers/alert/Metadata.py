# automatically generated by the FlatBuffers compiler, do not modify

# namespace: alert

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Metadata(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsMetadata(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Metadata()
        x.Init(buf, n + offset)
        return x

    # Metadata
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Metadata
    def UserId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Metadata
    def OctoprintDeviceId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Metadata
    def CloudiotDeviceId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # Metadata
    def PrintSession(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Metadata
    def ClientVersion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Metadata
    def ModelVersion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def MetadataStart(builder): builder.StartObject(6)
def MetadataAddUserId(builder, userId): builder.PrependUint32Slot(0, userId, 0)
def MetadataAddOctoprintDeviceId(builder, octoprintDeviceId): builder.PrependUint32Slot(1, octoprintDeviceId, 0)
def MetadataAddCloudiotDeviceId(builder, cloudiotDeviceId): builder.PrependUint64Slot(2, cloudiotDeviceId, 0)
def MetadataAddPrintSession(builder, printSession): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(printSession), 0)
def MetadataAddClientVersion(builder, clientVersion): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(clientVersion), 0)
def MetadataAddModelVersion(builder, modelVersion): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(modelVersion), 0)
def MetadataEnd(builder): return builder.EndObject()


class MetadataT(object):

    # MetadataT
    def __init__(self):
        self.userId = 0  # type: int
        self.octoprintDeviceId = 0  # type: int
        self.cloudiotDeviceId = 0  # type: int
        self.printSession = None  # type: str
        self.clientVersion = None  # type: str
        self.modelVersion = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        metadata = Metadata()
        metadata.Init(buf, pos)
        return cls.InitFromObj(metadata)

    @classmethod
    def InitFromObj(cls, metadata):
        x = MetadataT()
        x._UnPack(metadata)
        return x

    # MetadataT
    def _UnPack(self, metadata):
        if metadata is None:
            return
        self.userId = metadata.UserId()
        self.octoprintDeviceId = metadata.OctoprintDeviceId()
        self.cloudiotDeviceId = metadata.CloudiotDeviceId()
        self.printSession = metadata.PrintSession()
        self.clientVersion = metadata.ClientVersion()
        self.modelVersion = metadata.ModelVersion()

    # MetadataT
    def Pack(self, builder):
        if self.printSession is not None:
            printSession = builder.CreateString(self.printSession)
        if self.clientVersion is not None:
            clientVersion = builder.CreateString(self.clientVersion)
        if self.modelVersion is not None:
            modelVersion = builder.CreateString(self.modelVersion)
        MetadataStart(builder)
        MetadataAddUserId(builder, self.userId)
        MetadataAddOctoprintDeviceId(builder, self.octoprintDeviceId)
        MetadataAddCloudiotDeviceId(builder, self.cloudiotDeviceId)
        if self.printSession is not None:
            MetadataAddPrintSession(builder, printSession)
        if self.clientVersion is not None:
            MetadataAddClientVersion(builder, clientVersion)
        if self.modelVersion is not None:
            MetadataAddModelVersion(builder, modelVersion)
        metadata = MetadataEnd(builder)
        return metadata
