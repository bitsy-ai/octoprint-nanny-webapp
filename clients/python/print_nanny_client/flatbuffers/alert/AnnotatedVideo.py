# automatically generated by the FlatBuffers compiler, do not modify

# namespace: alert

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class AnnotatedVideo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsAnnotatedVideo(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AnnotatedVideo()
        x.Init(buf, n + offset)
        return x

    # AnnotatedVideo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # AnnotatedVideo
    def GcsInput(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # AnnotatedVideo
    def GcsOutput(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # AnnotatedVideo
    def CdnOutput(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # AnnotatedVideo
    def CdnRelativePath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # AnnotatedVideo
    def Bucket(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def AnnotatedVideoStart(builder): builder.StartObject(5)
def AnnotatedVideoAddGcsInput(builder, gcsInput): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(gcsInput), 0)
def AnnotatedVideoAddGcsOutput(builder, gcsOutput): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(gcsOutput), 0)
def AnnotatedVideoAddCdnOutput(builder, cdnOutput): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(cdnOutput), 0)
def AnnotatedVideoAddCdnRelativePath(builder, cdnRelativePath): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(cdnRelativePath), 0)
def AnnotatedVideoAddBucket(builder, bucket): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(bucket), 0)
def AnnotatedVideoEnd(builder): return builder.EndObject()


class AnnotatedVideoT(object):

    # AnnotatedVideoT
    def __init__(self):
        self.gcsInput = None  # type: str
        self.gcsOutput = None  # type: str
        self.cdnOutput = None  # type: str
        self.cdnRelativePath = None  # type: str
        self.bucket = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        annotatedVideo = AnnotatedVideo()
        annotatedVideo.Init(buf, pos)
        return cls.InitFromObj(annotatedVideo)

    @classmethod
    def InitFromObj(cls, annotatedVideo):
        x = AnnotatedVideoT()
        x._UnPack(annotatedVideo)
        return x

    # AnnotatedVideoT
    def _UnPack(self, annotatedVideo):
        if annotatedVideo is None:
            return
        self.gcsInput = annotatedVideo.GcsInput()
        self.gcsOutput = annotatedVideo.GcsOutput()
        self.cdnOutput = annotatedVideo.CdnOutput()
        self.cdnRelativePath = annotatedVideo.CdnRelativePath()
        self.bucket = annotatedVideo.Bucket()

    # AnnotatedVideoT
    def Pack(self, builder):
        if self.gcsInput is not None:
            gcsInput = builder.CreateString(self.gcsInput)
        if self.gcsOutput is not None:
            gcsOutput = builder.CreateString(self.gcsOutput)
        if self.cdnOutput is not None:
            cdnOutput = builder.CreateString(self.cdnOutput)
        if self.cdnRelativePath is not None:
            cdnRelativePath = builder.CreateString(self.cdnRelativePath)
        if self.bucket is not None:
            bucket = builder.CreateString(self.bucket)
        AnnotatedVideoStart(builder)
        if self.gcsInput is not None:
            AnnotatedVideoAddGcsInput(builder, gcsInput)
        if self.gcsOutput is not None:
            AnnotatedVideoAddGcsOutput(builder, gcsOutput)
        if self.cdnOutput is not None:
            AnnotatedVideoAddCdnOutput(builder, cdnOutput)
        if self.cdnRelativePath is not None:
            AnnotatedVideoAddCdnRelativePath(builder, cdnRelativePath)
        if self.bucket is not None:
            AnnotatedVideoAddBucket(builder, bucket)
        annotatedVideo = AnnotatedVideoEnd(builder)
        return annotatedVideo
