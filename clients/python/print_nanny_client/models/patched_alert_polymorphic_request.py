# coding: utf-8

"""

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.0
    Contact: leigh@bitsy.ai
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from print_nanny_client.configuration import Configuration


class PatchedAlertPolymorphicRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'alert_method': 'AlertMethodEnum',
        'event_type': 'OneOfEventTypeA2eEnumNullEnum',
        'seen': 'bool',
        'octoprint_device': 'int',
        'annotated_video': 'file',
        'event_subtype': 'EventSubtypeEnum',
        'print_session': 'int'
    }

    attribute_map = {
        'alert_method': 'alert_method',
        'event_type': 'event_type',
        'seen': 'seen',
        'octoprint_device': 'octoprint_device',
        'annotated_video': 'annotated_video',
        'event_subtype': 'event_subtype',
        'print_session': 'print_session'
    }

    discriminator_value_class_map = {
    }

    def __init__(self, alert_method=None, event_type=None, seen=None, octoprint_device=None, annotated_video=None, event_subtype=None, print_session=None, local_vars_configuration=None):  # noqa: E501
        """PatchedAlertPolymorphicRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._alert_method = None
        self._event_type = None
        self._seen = None
        self._octoprint_device = None
        self._annotated_video = None
        self._event_subtype = None
        self._print_session = None
        self.discriminator = 'type'

        if alert_method is not None:
            self.alert_method = alert_method
        self.event_type = event_type
        if seen is not None:
            self.seen = seen
        self.octoprint_device = octoprint_device
        if annotated_video is not None:
            self.annotated_video = annotated_video
        if event_subtype is not None:
            self.event_subtype = event_subtype
        if print_session is not None:
            self.print_session = print_session

    @property
    def alert_method(self):
        """Gets the alert_method of this PatchedAlertPolymorphicRequest.  # noqa: E501


        :return: The alert_method of this PatchedAlertPolymorphicRequest.  # noqa: E501
        :rtype: AlertMethodEnum
        """
        return self._alert_method

    @alert_method.setter
    def alert_method(self, alert_method):
        """Sets the alert_method of this PatchedAlertPolymorphicRequest.


        :param alert_method: The alert_method of this PatchedAlertPolymorphicRequest.  # noqa: E501
        :type alert_method: AlertMethodEnum
        """

        self._alert_method = alert_method

    @property
    def event_type(self):
        """Gets the event_type of this PatchedAlertPolymorphicRequest.  # noqa: E501


        :return: The event_type of this PatchedAlertPolymorphicRequest.  # noqa: E501
        :rtype: OneOfEventTypeA2eEnumNullEnum
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this PatchedAlertPolymorphicRequest.


        :param event_type: The event_type of this PatchedAlertPolymorphicRequest.  # noqa: E501
        :type event_type: OneOfEventTypeA2eEnumNullEnum
        """

        self._event_type = event_type

    @property
    def seen(self):
        """Gets the seen of this PatchedAlertPolymorphicRequest.  # noqa: E501


        :return: The seen of this PatchedAlertPolymorphicRequest.  # noqa: E501
        :rtype: bool
        """
        return self._seen

    @seen.setter
    def seen(self, seen):
        """Sets the seen of this PatchedAlertPolymorphicRequest.


        :param seen: The seen of this PatchedAlertPolymorphicRequest.  # noqa: E501
        :type seen: bool
        """

        self._seen = seen

    @property
    def octoprint_device(self):
        """Gets the octoprint_device of this PatchedAlertPolymorphicRequest.  # noqa: E501


        :return: The octoprint_device of this PatchedAlertPolymorphicRequest.  # noqa: E501
        :rtype: int
        """
        return self._octoprint_device

    @octoprint_device.setter
    def octoprint_device(self, octoprint_device):
        """Sets the octoprint_device of this PatchedAlertPolymorphicRequest.


        :param octoprint_device: The octoprint_device of this PatchedAlertPolymorphicRequest.  # noqa: E501
        :type octoprint_device: int
        """

        self._octoprint_device = octoprint_device

    @property
    def annotated_video(self):
        """Gets the annotated_video of this PatchedAlertPolymorphicRequest.  # noqa: E501


        :return: The annotated_video of this PatchedAlertPolymorphicRequest.  # noqa: E501
        :rtype: file
        """
        return self._annotated_video

    @annotated_video.setter
    def annotated_video(self, annotated_video):
        """Sets the annotated_video of this PatchedAlertPolymorphicRequest.


        :param annotated_video: The annotated_video of this PatchedAlertPolymorphicRequest.  # noqa: E501
        :type annotated_video: file
        """

        self._annotated_video = annotated_video

    @property
    def event_subtype(self):
        """Gets the event_subtype of this PatchedAlertPolymorphicRequest.  # noqa: E501


        :return: The event_subtype of this PatchedAlertPolymorphicRequest.  # noqa: E501
        :rtype: EventSubtypeEnum
        """
        return self._event_subtype

    @event_subtype.setter
    def event_subtype(self, event_subtype):
        """Sets the event_subtype of this PatchedAlertPolymorphicRequest.


        :param event_subtype: The event_subtype of this PatchedAlertPolymorphicRequest.  # noqa: E501
        :type event_subtype: EventSubtypeEnum
        """

        self._event_subtype = event_subtype

    @property
    def print_session(self):
        """Gets the print_session of this PatchedAlertPolymorphicRequest.  # noqa: E501


        :return: The print_session of this PatchedAlertPolymorphicRequest.  # noqa: E501
        :rtype: int
        """
        return self._print_session

    @print_session.setter
    def print_session(self, print_session):
        """Sets the print_session of this PatchedAlertPolymorphicRequest.


        :param print_session: The print_session of this PatchedAlertPolymorphicRequest.  # noqa: E501
        :type print_session: int
        """

        self._print_session = print_session

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_key = self.attribute_map[self.discriminator]
        discriminator_value = data[discriminator_key]
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PatchedAlertPolymorphicRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PatchedAlertPolymorphicRequest):
            return True

        return self.to_dict() != other.to_dict()
