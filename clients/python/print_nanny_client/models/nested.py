# coding: utf-8

"""

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.0
    Contact: leigh@bitsy.ai
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from print_nanny_client.configuration import Configuration


class Nested(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'app_label': 'str',
        'model': 'str'
    }

    attribute_map = {
        'id': 'id',
        'app_label': 'app_label',
        'model': 'model'
    }

    def __init__(self, id=None, app_label=None, model=None, local_vars_configuration=None):  # noqa: E501
        """Nested - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._app_label = None
        self._model = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.app_label = app_label
        self.model = model

    @property
    def id(self):
        """Gets the id of this Nested.  # noqa: E501


        :return: The id of this Nested.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Nested.


        :param id: The id of this Nested.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def app_label(self):
        """Gets the app_label of this Nested.  # noqa: E501


        :return: The app_label of this Nested.  # noqa: E501
        :rtype: str
        """
        return self._app_label

    @app_label.setter
    def app_label(self, app_label):
        """Sets the app_label of this Nested.


        :param app_label: The app_label of this Nested.  # noqa: E501
        :type app_label: str
        """
        if self.local_vars_configuration.client_side_validation and app_label is None:  # noqa: E501
            raise ValueError("Invalid value for `app_label`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                app_label is not None and len(app_label) > 100):
            raise ValueError("Invalid value for `app_label`, length must be less than or equal to `100`")  # noqa: E501

        self._app_label = app_label

    @property
    def model(self):
        """Gets the model of this Nested.  # noqa: E501


        :return: The model of this Nested.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this Nested.


        :param model: The model of this Nested.  # noqa: E501
        :type model: str
        """
        if self.local_vars_configuration.client_side_validation and model is None:  # noqa: E501
            raise ValueError("Invalid value for `model`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                model is not None and len(model) > 100):
            raise ValueError("Invalid value for `model`, length must be less than or equal to `100`")  # noqa: E501

        self._model = model

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Nested):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Nested):
            return True

        return self.to_dict() != other.to_dict()
