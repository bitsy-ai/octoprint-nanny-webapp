# coding: utf-8

"""

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.0
    Contact: leigh@bitsy.ai
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from print_nanny_client.configuration import Configuration


class PatchedPrintSessionRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'octoprint_device': 'int',
        'session': 'str',
        'progress': 'dict(str, object)',
        'printer_profile': 'int',
        'gcode_file': 'int',
        'gcode_filename': 'str'
    }

    attribute_map = {
        'octoprint_device': 'octoprint_device',
        'session': 'session',
        'progress': 'progress',
        'printer_profile': 'printer_profile',
        'gcode_file': 'gcode_file',
        'gcode_filename': 'gcode_filename'
    }

    def __init__(self, octoprint_device=None, session=None, progress=None, printer_profile=None, gcode_file=None, gcode_filename=None, local_vars_configuration=None):  # noqa: E501
        """PatchedPrintSessionRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._octoprint_device = None
        self._session = None
        self._progress = None
        self._printer_profile = None
        self._gcode_file = None
        self._gcode_filename = None
        self.discriminator = None

        if octoprint_device is not None:
            self.octoprint_device = octoprint_device
        if session is not None:
            self.session = session
        if progress is not None:
            self.progress = progress
        self.printer_profile = printer_profile
        self.gcode_file = gcode_file
        self.gcode_filename = gcode_filename

    @property
    def octoprint_device(self):
        """Gets the octoprint_device of this PatchedPrintSessionRequest.  # noqa: E501


        :return: The octoprint_device of this PatchedPrintSessionRequest.  # noqa: E501
        :rtype: int
        """
        return self._octoprint_device

    @octoprint_device.setter
    def octoprint_device(self, octoprint_device):
        """Sets the octoprint_device of this PatchedPrintSessionRequest.


        :param octoprint_device: The octoprint_device of this PatchedPrintSessionRequest.  # noqa: E501
        :type octoprint_device: int
        """

        self._octoprint_device = octoprint_device

    @property
    def session(self):
        """Gets the session of this PatchedPrintSessionRequest.  # noqa: E501


        :return: The session of this PatchedPrintSessionRequest.  # noqa: E501
        :rtype: str
        """
        return self._session

    @session.setter
    def session(self, session):
        """Sets the session of this PatchedPrintSessionRequest.


        :param session: The session of this PatchedPrintSessionRequest.  # noqa: E501
        :type session: str
        """
        if (self.local_vars_configuration.client_side_validation and
                session is not None and len(session) > 255):
            raise ValueError("Invalid value for `session`, length must be less than or equal to `255`")  # noqa: E501

        self._session = session

    @property
    def progress(self):
        """Gets the progress of this PatchedPrintSessionRequest.  # noqa: E501


        :return: The progress of this PatchedPrintSessionRequest.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this PatchedPrintSessionRequest.


        :param progress: The progress of this PatchedPrintSessionRequest.  # noqa: E501
        :type progress: dict(str, object)
        """

        self._progress = progress

    @property
    def printer_profile(self):
        """Gets the printer_profile of this PatchedPrintSessionRequest.  # noqa: E501


        :return: The printer_profile of this PatchedPrintSessionRequest.  # noqa: E501
        :rtype: int
        """
        return self._printer_profile

    @printer_profile.setter
    def printer_profile(self, printer_profile):
        """Sets the printer_profile of this PatchedPrintSessionRequest.


        :param printer_profile: The printer_profile of this PatchedPrintSessionRequest.  # noqa: E501
        :type printer_profile: int
        """

        self._printer_profile = printer_profile

    @property
    def gcode_file(self):
        """Gets the gcode_file of this PatchedPrintSessionRequest.  # noqa: E501


        :return: The gcode_file of this PatchedPrintSessionRequest.  # noqa: E501
        :rtype: int
        """
        return self._gcode_file

    @gcode_file.setter
    def gcode_file(self, gcode_file):
        """Sets the gcode_file of this PatchedPrintSessionRequest.


        :param gcode_file: The gcode_file of this PatchedPrintSessionRequest.  # noqa: E501
        :type gcode_file: int
        """

        self._gcode_file = gcode_file

    @property
    def gcode_filename(self):
        """Gets the gcode_filename of this PatchedPrintSessionRequest.  # noqa: E501


        :return: The gcode_filename of this PatchedPrintSessionRequest.  # noqa: E501
        :rtype: str
        """
        return self._gcode_filename

    @gcode_filename.setter
    def gcode_filename(self, gcode_filename):
        """Sets the gcode_filename of this PatchedPrintSessionRequest.


        :param gcode_filename: The gcode_filename of this PatchedPrintSessionRequest.  # noqa: E501
        :type gcode_filename: str
        """
        if (self.local_vars_configuration.client_side_validation and
                gcode_filename is not None and len(gcode_filename) > 255):
            raise ValueError("Invalid value for `gcode_filename`, length must be less than or equal to `255`")  # noqa: E501

        self._gcode_filename = gcode_filename

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PatchedPrintSessionRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PatchedPrintSessionRequest):
            return True

        return self.to_dict() != other.to_dict()
