/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Alert
 */
export interface Alert {
    /**
     * 
     * @type {string}
     * @memberof Alert
     */
    created_dt?: string;
    /**
     * 
     * @type {string}
     * @memberof Alert
     */
    updated_dt?: string;
    /**
     * 
     * @type {number}
     * @memberof Alert
     */
    user?: number;
    /**
     * 
     * @type {string}
     * @memberof Alert
     */
    time?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Alert
     */
    seen?: boolean;
}
/**
 * Serializer used in POST /api/alerts/seen and POST /api/alerts/dismiss requests
 * @export
 * @interface AlertBulkResponse
 */
export interface AlertBulkResponse {
    /**
     * 
     * @type {number}
     * @memberof AlertBulkResponse
     */
    received: number;
    /**
     * 
     * @type {number}
     * @memberof AlertBulkResponse
     */
    updated: number;
}
/**
 * 
 * @export
 * @interface AlertMethod
 */
export interface AlertMethod {
    /**
     * 
     * @type {string}
     * @memberof AlertMethod
     */
    label: string;
    /**
     * 
     * @type {string}
     * @memberof AlertMethod
     */
    value: string;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum AlertMethodsEnum {
    Ui = 'UI',
    Email = 'EMAIL',
    Discord = 'DISCORD'
}

/**
 * @type AlertPolymorphic
 * @export
 */
export type AlertPolymorphic = Alert | ManualVideoUploadAlert | PrintSessionAlert | ProgressAlert | RemoteControlCommandAlert;

/**
 * @type AlertPolymorphicRequest
 * @export
 */
export type AlertPolymorphicRequest = AlertRequest | ManualVideoUploadAlertRequest | PrintSessionAlertRequest | ProgressAlertRequest | RemoteControlCommandAlertRequest;

/**
 * 
 * @export
 * @interface AlertRequest
 */
export interface AlertRequest {
    /**
     * 
     * @type {boolean}
     * @memberof AlertRequest
     */
    seen?: boolean;
}
/**
 * 
 * @export
 * @interface AlertSettings
 */
export interface AlertSettings {
    /**
     * 
     * @type {number}
     * @memberof AlertSettings
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof AlertSettings
     */
    created_dt?: string;
    /**
     * 
     * @type {string}
     * @memberof AlertSettings
     */
    updated_dt?: string;
    /**
     * 
     * @type {AlertTypeEnum}
     * @memberof AlertSettings
     */
    alert_type: AlertTypeEnum;
    /**
     * 
     * @type {Array<AlertMethodsEnum>}
     * @memberof AlertSettings
     */
    alert_methods?: Array<AlertMethodsEnum>;
    /**
     * Enable or disable this alert channel
     * @type {boolean}
     * @memberof AlertSettings
     */
    enabled?: boolean;
    /**
     * 
     * @type {number}
     * @memberof AlertSettings
     */
    polymorphic_ctype?: number;
}
/**
 * @type AlertSettingsPolymorphic
 * @export
 */
export type AlertSettingsPolymorphic = AlertSettings | CommandAlertSettings | ProgressAlertSettings;

/**
 * @type AlertSettingsPolymorphicRequest
 * @export
 */
export type AlertSettingsPolymorphicRequest = AlertSettingsRequest | CommandAlertSettingsRequest | ProgressAlertSettingsRequest;

/**
 * 
 * @export
 * @interface AlertSettingsRequest
 */
export interface AlertSettingsRequest {
    /**
     * 
     * @type {AlertTypeEnum}
     * @memberof AlertSettingsRequest
     */
    alert_type: AlertTypeEnum;
    /**
     * 
     * @type {Array<AlertMethodsEnum>}
     * @memberof AlertSettingsRequest
     */
    alert_methods?: Array<AlertMethodsEnum>;
    /**
     * Enable or disable this alert channel
     * @type {boolean}
     * @memberof AlertSettingsRequest
     */
    enabled?: boolean;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum AlertTypeEnum {
    Command = 'COMMAND',
    PrintProgress = 'PRINT_PROGRESS',
    ManualVideoUpload = 'MANUAL_VIDEO_UPLOAD',
    PrintSession = 'PRINT_SESSION'
}

/**
 * 
 * @export
 * @enum {string}
 */
export enum ArtifactTypesEnum {
    Tflite = 'TFLITE',
    Tf1 = 'TF1',
    Tf2SavedModel = 'TF2_SAVED_MODEL',
    Tf2Hdf5 = 'TF2_HDF5'
}

/**
 * 
 * @export
 * @interface AuthToken
 */
export interface AuthToken {
    /**
     * 
     * @type {string}
     * @memberof AuthToken
     */
    token?: string;
}
/**
 * 
 * @export
 * @interface AuthTokenRequest
 */
export interface AuthTokenRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthTokenRequest
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof AuthTokenRequest
     */
    password: string;
}
/**
 * 
 * @export
 * @interface CommandAlertSettings
 */
export interface CommandAlertSettings {
    /**
     * 
     * @type {number}
     * @memberof CommandAlertSettings
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof CommandAlertSettings
     */
    created_dt?: string;
    /**
     * 
     * @type {string}
     * @memberof CommandAlertSettings
     */
    updated_dt?: string;
    /**
     * 
     * @type {AlertTypeEnum}
     * @memberof CommandAlertSettings
     */
    alert_type: AlertTypeEnum;
    /**
     * 
     * @type {Array<AlertMethodsEnum>}
     * @memberof CommandAlertSettings
     */
    alert_methods?: Array<AlertMethodsEnum>;
    /**
     * Enable or disable this alert channel
     * @type {boolean}
     * @memberof CommandAlertSettings
     */
    enabled?: boolean;
    /**
     * Fires on <strong>MonitoringStop<strong> updates.   Helps debug unexpected Print Nanny crashes.
     * @type {Array<MoveNozzleEnum>}
     * @memberof CommandAlertSettings
     */
    monitoring_stop?: Array<MoveNozzleEnum>;
    /**
     * Fires on <strong>MonitoringStop</strong> updates. Helpful if you want to confirm monitoring started without a problem.
     * @type {Array<MoveNozzleEnum>}
     * @memberof CommandAlertSettings
     */
    monitoring_start?: Array<MoveNozzleEnum>;
    /**
     * Fires on <strong>StopPrint</strong> updates. Get notified as soon as a print job finishes. 
     * @type {Array<MoveNozzleEnum>}
     * @memberof CommandAlertSettings
     */
    print_start?: Array<MoveNozzleEnum>;
    /**
     * Fires on <strong>PrintStart</strong> command status changes. Helpful for verifying a print job started without a problem.
     * @type {Array<MoveNozzleEnum>}
     * @memberof CommandAlertSettings
     */
    print_stop?: Array<MoveNozzleEnum>;
    /**
     * Fires on <strong>PausePrint</strong> command status changes. Helpful for verifying a print was paused successfully.
     * @type {Array<MoveNozzleEnum>}
     * @memberof CommandAlertSettings
     */
    print_pause?: Array<MoveNozzleEnum>;
    /**
     * Fires on <strong>ResumePrint</strong> command status changes Helpful for verifying a print was resumed.
     * @type {Array<MoveNozzleEnum>}
     * @memberof CommandAlertSettings
     */
    print_resume?: Array<MoveNozzleEnum>;
    /**
     * Fires on <strong>MoveNozzle</strong>command status changes. Helpful for debugging connectivity between Print Nanny and OctoPrint
     * @type {Array<MoveNozzleEnum>}
     * @memberof CommandAlertSettings
     */
    move_nozzle?: Array<MoveNozzleEnum>;
    /**
     * 
     * @type {number}
     * @memberof CommandAlertSettings
     */
    polymorphic_ctype?: number;
    /**
     * 
     * @type {number}
     * @memberof CommandAlertSettings
     */
    user?: number;
}
/**
 * 
 * @export
 * @interface CommandAlertSettingsRequest
 */
export interface CommandAlertSettingsRequest {
    /**
     * 
     * @type {AlertTypeEnum}
     * @memberof CommandAlertSettingsRequest
     */
    alert_type: AlertTypeEnum;
    /**
     * 
     * @type {Array<AlertMethodsEnum>}
     * @memberof CommandAlertSettingsRequest
     */
    alert_methods?: Array<AlertMethodsEnum>;
    /**
     * Enable or disable this alert channel
     * @type {boolean}
     * @memberof CommandAlertSettingsRequest
     */
    enabled?: boolean;
    /**
     * Fires on <strong>MonitoringStop<strong> updates.   Helps debug unexpected Print Nanny crashes.
     * @type {Array<MoveNozzleEnum>}
     * @memberof CommandAlertSettingsRequest
     */
    monitoring_stop?: Array<MoveNozzleEnum>;
    /**
     * Fires on <strong>MonitoringStop</strong> updates. Helpful if you want to confirm monitoring started without a problem.
     * @type {Array<MoveNozzleEnum>}
     * @memberof CommandAlertSettingsRequest
     */
    monitoring_start?: Array<MoveNozzleEnum>;
    /**
     * Fires on <strong>StopPrint</strong> updates. Get notified as soon as a print job finishes. 
     * @type {Array<MoveNozzleEnum>}
     * @memberof CommandAlertSettingsRequest
     */
    print_start?: Array<MoveNozzleEnum>;
    /**
     * Fires on <strong>PrintStart</strong> command status changes. Helpful for verifying a print job started without a problem.
     * @type {Array<MoveNozzleEnum>}
     * @memberof CommandAlertSettingsRequest
     */
    print_stop?: Array<MoveNozzleEnum>;
    /**
     * Fires on <strong>PausePrint</strong> command status changes. Helpful for verifying a print was paused successfully.
     * @type {Array<MoveNozzleEnum>}
     * @memberof CommandAlertSettingsRequest
     */
    print_pause?: Array<MoveNozzleEnum>;
    /**
     * Fires on <strong>ResumePrint</strong> command status changes Helpful for verifying a print was resumed.
     * @type {Array<MoveNozzleEnum>}
     * @memberof CommandAlertSettingsRequest
     */
    print_resume?: Array<MoveNozzleEnum>;
    /**
     * Fires on <strong>MoveNozzle</strong>command status changes. Helpful for debugging connectivity between Print Nanny and OctoPrint
     * @type {Array<MoveNozzleEnum>}
     * @memberof CommandAlertSettingsRequest
     */
    move_nozzle?: Array<MoveNozzleEnum>;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum CommandEnum {
    MonitoringStop = 'monitoring_stop',
    MonitoringStart = 'monitoring_start',
    PrintStart = 'print_start',
    PrintStop = 'print_stop',
    PrintPause = 'print_pause',
    PrintResume = 'print_resume',
    MoveNozzle = 'move_nozzle'
}

/**
 * 
 * @export
 * @interface CreatePrintSessionAlertRequest
 */
export interface CreatePrintSessionAlertRequest {
    /**
     * 
     * @type {string}
     * @memberof CreatePrintSessionAlertRequest
     */
    print_session: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePrintSessionAlertRequest
     */
    annotated_video: string;
}
/**
 * 
 * @export
 * @interface DeviceCalibration
 */
export interface DeviceCalibration {
    /**
     * 
     * @type {number}
     * @memberof DeviceCalibration
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof DeviceCalibration
     */
    created_dt?: string;
    /**
     * 
     * @type {string}
     * @memberof DeviceCalibration
     */
    updated_dt?: string;
    /**
     * 
     * @type {number}
     * @memberof DeviceCalibration
     */
    octoprint_device: number;
    /**
     * 
     * @type {number}
     * @memberof DeviceCalibration
     */
    fpm?: number | null;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof DeviceCalibration
     */
    coordinates?: { [key: string]: any; } | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof DeviceCalibration
     */
    mask: Array<number>;
    /**
     * 
     * @type {string}
     * @memberof DeviceCalibration
     */
    config_file?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DeviceCalibration
     */
    url?: string;
}
/**
 * 
 * @export
 * @interface DeviceCalibrationRequest
 */
export interface DeviceCalibrationRequest {
    /**
     * 
     * @type {number}
     * @memberof DeviceCalibrationRequest
     */
    octoprint_device: number;
    /**
     * 
     * @type {number}
     * @memberof DeviceCalibrationRequest
     */
    fpm?: number | null;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof DeviceCalibrationRequest
     */
    coordinates?: { [key: string]: any; } | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof DeviceCalibrationRequest
     */
    mask: Array<number>;
    /**
     * 
     * @type {any}
     * @memberof DeviceCalibrationRequest
     */
    config_file?: any | null;
}
/**
 * 
 * @export
 * @interface Experiment
 */
export interface Experiment {
    /**
     * 
     * @type {number}
     * @memberof Experiment
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Experiment
     */
    created_dt?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Experiment
     */
    active?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Experiment
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Experiment
     */
    hypothesis: string;
    /**
     * 
     * @type {Nested}
     * @memberof Experiment
     */
    control?: Nested;
    /**
     * 
     * @type {Array<Nested>}
     * @memberof Experiment
     */
    treatments?: Array<Nested>;
    /**
     * 
     * @type {string}
     * @memberof Experiment
     */
    notion_url?: string | null;
}
/**
 * 
 * @export
 * @interface ExperimentDeviceConfig
 */
export interface ExperimentDeviceConfig {
    /**
     * 
     * @type {number}
     * @memberof ExperimentDeviceConfig
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof ExperimentDeviceConfig
     */
    created_dt?: string;
    /**
     * 
     * @type {Nested}
     * @memberof ExperimentDeviceConfig
     */
    experiment?: Nested;
    /**
     * 
     * @type {Nested}
     * @memberof ExperimentDeviceConfig
     */
    artifact?: Nested;
}
/**
 * 
 * @export
 * @interface GcodeFile
 */
export interface GcodeFile {
    /**
     * 
     * @type {number}
     * @memberof GcodeFile
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof GcodeFile
     */
    user?: number;
    /**
     * 
     * @type {string}
     * @memberof GcodeFile
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof GcodeFile
     */
    file: string;
    /**
     * 
     * @type {string}
     * @memberof GcodeFile
     */
    file_hash: string;
    /**
     * 
     * @type {string}
     * @memberof GcodeFile
     */
    octoprint_device: string;
    /**
     * 
     * @type {string}
     * @memberof GcodeFile
     */
    url?: string;
}
/**
 * 
 * @export
 * @interface GcodeFileRequest
 */
export interface GcodeFileRequest {
    /**
     * 
     * @type {string}
     * @memberof GcodeFileRequest
     */
    name: string;
    /**
     * 
     * @type {any}
     * @memberof GcodeFileRequest
     */
    file: any;
    /**
     * 
     * @type {string}
     * @memberof GcodeFileRequest
     */
    file_hash: string;
    /**
     * 
     * @type {string}
     * @memberof GcodeFileRequest
     */
    octoprint_device: string;
}
/**
 * 
 * @export
 * @interface ManualVideoUploadAlert
 */
export interface ManualVideoUploadAlert {
    /**
     * 
     * @type {string}
     * @memberof ManualVideoUploadAlert
     */
    created_dt?: string;
    /**
     * 
     * @type {string}
     * @memberof ManualVideoUploadAlert
     */
    updated_dt?: string;
    /**
     * 
     * @type {number}
     * @memberof ManualVideoUploadAlert
     */
    user?: number;
    /**
     * 
     * @type {AlertTypeEnum}
     * @memberof ManualVideoUploadAlert
     */
    alert_type: AlertTypeEnum;
}
/**
 * 
 * @export
 * @interface ManualVideoUploadAlertRequest
 */
export interface ManualVideoUploadAlertRequest {
    /**
     * 
     * @type {AlertTypeEnum}
     * @memberof ManualVideoUploadAlertRequest
     */
    alert_type: AlertTypeEnum;
}
/**
 * 
 * @export
 * @interface ModelArtifact
 */
export interface ModelArtifact {
    /**
     * 
     * @type {number}
     * @memberof ModelArtifact
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof ModelArtifact
     */
    created_dt?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelArtifact
     */
    version?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelArtifact
     */
    labels?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelArtifact
     */
    artifacts?: string;
    /**
     * 
     * @type {Array<ArtifactTypesEnum>}
     * @memberof ModelArtifact
     */
    artifact_types?: Array<ArtifactTypesEnum>;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof ModelArtifact
     */
    metadata?: { [key: string]: any; };
    /**
     * 
     * @type {string}
     * @memberof ModelArtifact
     */
    url?: string;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum MonitoringModeEnum {
    ActiveLearning = 'active_learning',
    Lite = 'lite'
}

/**
 * 
 * @export
 * @enum {string}
 */
export enum MoveNozzleEnum {
    Received = 'RECEIVED',
    Failed = 'FAILED',
    Success = 'SUCCESS'
}

/**
 * 
 * @export
 * @interface Nested
 */
export interface Nested {
    /**
     * 
     * @type {number}
     * @memberof Nested
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Nested
     */
    created_dt?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Nested
     */
    active?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Nested
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Nested
     */
    hypothesis: string;
    /**
     * 
     * @type {string}
     * @memberof Nested
     */
    notion_url?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Nested
     */
    control: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof Nested
     */
    treatments?: Array<number>;
}
/**
 * 
 * @export
 * @interface OctoPrintDevice
 */
export interface OctoPrintDevice {
    /**
     * 
     * @type {number}
     * @memberof OctoPrintDevice
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintDevice
     */
    created_dt?: string;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintDevice
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof OctoPrintDevice
     */
    user?: number;
    /**
     * 
     * @type {number}
     * @memberof OctoPrintDevice
     */
    last_session?: number | null;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintDevice
     */
    public_key?: string;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintDevice
     */
    fingerprint?: string;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof OctoPrintDevice
     */
    cloudiot_device?: { [key: string]: any; };
    /**
     * 
     * @type {string}
     * @memberof OctoPrintDevice
     */
    cloudiot_device_name?: string;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintDevice
     */
    cloudiot_device_path?: string;
    /**
     * 
     * @type {number}
     * @memberof OctoPrintDevice
     */
    cloudiot_device_num_id?: number;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintDevice
     */
    model: string;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintDevice
     */
    platform: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof OctoPrintDevice
     */
    cpu_flags: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintDevice
     */
    hardware: string;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintDevice
     */
    revision: string;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintDevice
     */
    serial: string;
    /**
     * 
     * @type {number}
     * @memberof OctoPrintDevice
     */
    cores: number;
    /**
     * 
     * @type {number}
     * @memberof OctoPrintDevice
     */
    ram: number;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintDevice
     */
    python_version: string;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintDevice
     */
    pip_version: string;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintDevice
     */
    virtualenv: string;
    /**
     * 
     * @type {boolean}
     * @memberof OctoPrintDevice
     */
    monitoring_active?: boolean;
    /**
     * 
     * @type {MonitoringModeEnum}
     * @memberof OctoPrintDevice
     */
    monitoring_mode?: MonitoringModeEnum;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintDevice
     */
    octoprint_version: string;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintDevice
     */
    plugin_version: string;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintDevice
     */
    print_nanny_client_version: string;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintDevice
     */
    cloudiot_device_configs?: string;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintDevice
     */
    manage_url?: string;
}
/**
 * 
 * @export
 * @interface OctoPrintDeviceKey
 */
export interface OctoPrintDeviceKey {
    /**
     * 
     * @type {number}
     * @memberof OctoPrintDeviceKey
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintDeviceKey
     */
    created_dt?: string;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintDeviceKey
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof OctoPrintDeviceKey
     */
    user?: number;
    /**
     * 
     * @type {number}
     * @memberof OctoPrintDeviceKey
     */
    last_session?: number | null;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintDeviceKey
     */
    public_key?: string;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintDeviceKey
     */
    fingerprint?: string;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof OctoPrintDeviceKey
     */
    cloudiot_device?: { [key: string]: any; };
    /**
     * 
     * @type {string}
     * @memberof OctoPrintDeviceKey
     */
    cloudiot_device_name?: string;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintDeviceKey
     */
    cloudiot_device_path?: string;
    /**
     * 
     * @type {number}
     * @memberof OctoPrintDeviceKey
     */
    cloudiot_device_num_id?: number;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintDeviceKey
     */
    model: string;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintDeviceKey
     */
    platform: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof OctoPrintDeviceKey
     */
    cpu_flags: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintDeviceKey
     */
    hardware: string;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintDeviceKey
     */
    revision: string;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintDeviceKey
     */
    serial: string;
    /**
     * 
     * @type {number}
     * @memberof OctoPrintDeviceKey
     */
    cores: number;
    /**
     * 
     * @type {number}
     * @memberof OctoPrintDeviceKey
     */
    ram: number;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintDeviceKey
     */
    python_version: string;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintDeviceKey
     */
    pip_version: string;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintDeviceKey
     */
    virtualenv: string;
    /**
     * 
     * @type {boolean}
     * @memberof OctoPrintDeviceKey
     */
    monitoring_active?: boolean;
    /**
     * 
     * @type {MonitoringModeEnum}
     * @memberof OctoPrintDeviceKey
     */
    monitoring_mode?: MonitoringModeEnum;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintDeviceKey
     */
    octoprint_version: string;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintDeviceKey
     */
    plugin_version: string;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintDeviceKey
     */
    print_nanny_client_version: string;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintDeviceKey
     */
    url?: string;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintDeviceKey
     */
    private_key?: string;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintDeviceKey
     */
    private_key_checksum?: string;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintDeviceKey
     */
    public_key_checksum: string;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintDeviceKey
     */
    cloudiot_device_configs?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof OctoPrintDeviceKey
     */
    ca_certs: { [key: string]: string; };
    /**
     * 
     * @type {string}
     * @memberof OctoPrintDeviceKey
     */
    manage_url?: string;
}
/**
 * 
 * @export
 * @interface OctoPrintDeviceRequest
 */
export interface OctoPrintDeviceRequest {
    /**
     * 
     * @type {string}
     * @memberof OctoPrintDeviceRequest
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof OctoPrintDeviceRequest
     */
    last_session?: number | null;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintDeviceRequest
     */
    model: string;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintDeviceRequest
     */
    platform: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof OctoPrintDeviceRequest
     */
    cpu_flags: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintDeviceRequest
     */
    hardware: string;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintDeviceRequest
     */
    revision: string;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintDeviceRequest
     */
    serial: string;
    /**
     * 
     * @type {number}
     * @memberof OctoPrintDeviceRequest
     */
    cores: number;
    /**
     * 
     * @type {number}
     * @memberof OctoPrintDeviceRequest
     */
    ram: number;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintDeviceRequest
     */
    python_version: string;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintDeviceRequest
     */
    pip_version: string;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintDeviceRequest
     */
    virtualenv: string;
    /**
     * 
     * @type {boolean}
     * @memberof OctoPrintDeviceRequest
     */
    monitoring_active?: boolean;
    /**
     * 
     * @type {MonitoringModeEnum}
     * @memberof OctoPrintDeviceRequest
     */
    monitoring_mode?: MonitoringModeEnum;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintDeviceRequest
     */
    octoprint_version: string;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintDeviceRequest
     */
    plugin_version: string;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintDeviceRequest
     */
    print_nanny_client_version: string;
}
/**
 * 
 * @export
 * @interface OctoPrintEvent
 */
export interface OctoPrintEvent {
    /**
     * 
     * @type {number}
     * @memberof OctoPrintEvent
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintEvent
     */
    created_dt?: string;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof OctoPrintEvent
     */
    event_data?: { [key: string]: any; } | null;
    /**
     * 
     * @type {number}
     * @memberof OctoPrintEvent
     */
    device: number;
    /**
     * 
     * @type {number}
     * @memberof OctoPrintEvent
     */
    user?: number;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintEvent
     */
    plugin_version: string;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintEvent
     */
    client_version: string;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintEvent
     */
    octoprint_version: string;
    /**
     * 
     * @type {OctoPrintEventEventTypeEnum}
     * @memberof OctoPrintEvent
     */
    event_type: OctoPrintEventEventTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof OctoPrintEvent
     */
    print_session?: number | null;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintEvent
     */
    url?: string;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum OctoPrintEventEventTypeEnum {
    ClientAuthed = 'ClientAuthed',
    ClientClosed = 'ClientClosed',
    ClientDeauthed = 'ClientDeauthed',
    ClientOpened = 'ClientOpened',
    SettingsUpdated = 'SettingsUpdated',
    UserLoggedIn = 'UserLoggedIn',
    UserLoggedOut = 'UserLoggedOut',
    FileAdded = 'FileAdded',
    FileRemoved = 'FileRemoved',
    FolderAdded = 'FolderAdded',
    FolderRemoved = 'FolderRemoved',
    TransferDone = 'TransferDone',
    TransferFailed = 'TransferFailed',
    TransferStarted = 'TransferStarted',
    UpdatedFiles = 'UpdatedFiles',
    Upload = 'Upload',
    CaptureDone = 'CaptureDone',
    CaptureFailed = 'CaptureFailed',
    CaptureStart = 'CaptureStart',
    MovieDone = 'MovieDone',
    MovieFailed = 'MovieFailed',
    MovieRendering = 'MovieRendering',
    PostRollEnd = 'PostRollEnd',
    PostRollStart = 'PostRollStart',
    SlicingCancelled = 'SlicingCancelled',
    SlicingDone = 'SlicingDone',
    SlicingFailed = 'SlicingFailed',
    SlicingProfileAdded = 'SlicingProfileAdded',
    SlicingProfileDeleted = 'SlicingProfileDeleted',
    SlicingProfileModified = 'SlicingProfileModified',
    SlicingStarted = 'SlicingStarted',
    Connected = 'Connected',
    Disconnected = 'Disconnected',
    PrinterReset = 'PrinterReset',
    PrinterStateChanged = 'PrinterStateChanged',
    FirmwareData = 'FirmwareData',
    PrinterProfileAdded = 'PrinterProfileAdded',
    PrinterProfileDeleted = 'PrinterProfileDeleted',
    PrinterProfileModified = 'PrinterProfileModified',
    PrintProgress = 'PrintProgress',
    PluginPiSupportThrottleState = 'plugin_pi_support_throttle_state',
    Shutdown = 'Shutdown',
    Startup = 'Startup'
}

/**
 * 
 * @export
 * @interface OctoPrintEventRequest
 */
export interface OctoPrintEventRequest {
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof OctoPrintEventRequest
     */
    event_data?: { [key: string]: any; } | null;
    /**
     * 
     * @type {number}
     * @memberof OctoPrintEventRequest
     */
    device: number;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintEventRequest
     */
    plugin_version: string;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintEventRequest
     */
    client_version: string;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintEventRequest
     */
    octoprint_version: string;
    /**
     * 
     * @type {OctoPrintEventEventTypeEnum}
     * @memberof OctoPrintEventRequest
     */
    event_type: OctoPrintEventEventTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof OctoPrintEventRequest
     */
    print_session?: number | null;
}
/**
 * 
 * @export
 * @interface PaginatedAlertPolymorphicList
 */
export interface PaginatedAlertPolymorphicList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedAlertPolymorphicList
     */
    count?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedAlertPolymorphicList
     */
    next?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedAlertPolymorphicList
     */
    previous?: string | null;
    /**
     * 
     * @type {Array<AlertPolymorphic>}
     * @memberof PaginatedAlertPolymorphicList
     */
    results?: Array<AlertPolymorphic>;
}
/**
 * 
 * @export
 * @interface PaginatedAlertSettingsPolymorphicList
 */
export interface PaginatedAlertSettingsPolymorphicList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedAlertSettingsPolymorphicList
     */
    count?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedAlertSettingsPolymorphicList
     */
    next?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedAlertSettingsPolymorphicList
     */
    previous?: string | null;
    /**
     * 
     * @type {Array<AlertSettingsPolymorphic>}
     * @memberof PaginatedAlertSettingsPolymorphicList
     */
    results?: Array<AlertSettingsPolymorphic>;
}
/**
 * 
 * @export
 * @interface PaginatedDeviceCalibrationList
 */
export interface PaginatedDeviceCalibrationList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedDeviceCalibrationList
     */
    count?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedDeviceCalibrationList
     */
    next?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedDeviceCalibrationList
     */
    previous?: string | null;
    /**
     * 
     * @type {Array<DeviceCalibration>}
     * @memberof PaginatedDeviceCalibrationList
     */
    results?: Array<DeviceCalibration>;
}
/**
 * 
 * @export
 * @interface PaginatedExperimentDeviceConfigList
 */
export interface PaginatedExperimentDeviceConfigList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedExperimentDeviceConfigList
     */
    count?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedExperimentDeviceConfigList
     */
    next?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedExperimentDeviceConfigList
     */
    previous?: string | null;
    /**
     * 
     * @type {Array<ExperimentDeviceConfig>}
     * @memberof PaginatedExperimentDeviceConfigList
     */
    results?: Array<ExperimentDeviceConfig>;
}
/**
 * 
 * @export
 * @interface PaginatedExperimentList
 */
export interface PaginatedExperimentList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedExperimentList
     */
    count?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedExperimentList
     */
    next?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedExperimentList
     */
    previous?: string | null;
    /**
     * 
     * @type {Array<Experiment>}
     * @memberof PaginatedExperimentList
     */
    results?: Array<Experiment>;
}
/**
 * 
 * @export
 * @interface PaginatedGcodeFileList
 */
export interface PaginatedGcodeFileList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedGcodeFileList
     */
    count?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedGcodeFileList
     */
    next?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedGcodeFileList
     */
    previous?: string | null;
    /**
     * 
     * @type {Array<GcodeFile>}
     * @memberof PaginatedGcodeFileList
     */
    results?: Array<GcodeFile>;
}
/**
 * 
 * @export
 * @interface PaginatedModelArtifactList
 */
export interface PaginatedModelArtifactList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedModelArtifactList
     */
    count?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedModelArtifactList
     */
    next?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedModelArtifactList
     */
    previous?: string | null;
    /**
     * 
     * @type {Array<ModelArtifact>}
     * @memberof PaginatedModelArtifactList
     */
    results?: Array<ModelArtifact>;
}
/**
 * 
 * @export
 * @interface PaginatedOctoPrintDeviceList
 */
export interface PaginatedOctoPrintDeviceList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedOctoPrintDeviceList
     */
    count?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedOctoPrintDeviceList
     */
    next?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedOctoPrintDeviceList
     */
    previous?: string | null;
    /**
     * 
     * @type {Array<OctoPrintDevice>}
     * @memberof PaginatedOctoPrintDeviceList
     */
    results?: Array<OctoPrintDevice>;
}
/**
 * 
 * @export
 * @interface PaginatedOctoPrintEventList
 */
export interface PaginatedOctoPrintEventList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedOctoPrintEventList
     */
    count?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedOctoPrintEventList
     */
    next?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedOctoPrintEventList
     */
    previous?: string | null;
    /**
     * 
     * @type {Array<OctoPrintEvent>}
     * @memberof PaginatedOctoPrintEventList
     */
    results?: Array<OctoPrintEvent>;
}
/**
 * 
 * @export
 * @interface PaginatedPluginEventList
 */
export interface PaginatedPluginEventList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedPluginEventList
     */
    count?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedPluginEventList
     */
    next?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedPluginEventList
     */
    previous?: string | null;
    /**
     * 
     * @type {Array<PluginEvent>}
     * @memberof PaginatedPluginEventList
     */
    results?: Array<PluginEvent>;
}
/**
 * 
 * @export
 * @interface PaginatedPrintSessionAlertList
 */
export interface PaginatedPrintSessionAlertList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedPrintSessionAlertList
     */
    count?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedPrintSessionAlertList
     */
    next?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedPrintSessionAlertList
     */
    previous?: string | null;
    /**
     * 
     * @type {Array<PrintSessionAlert>}
     * @memberof PaginatedPrintSessionAlertList
     */
    results?: Array<PrintSessionAlert>;
}
/**
 * 
 * @export
 * @interface PaginatedPrintSessionList
 */
export interface PaginatedPrintSessionList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedPrintSessionList
     */
    count?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedPrintSessionList
     */
    next?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedPrintSessionList
     */
    previous?: string | null;
    /**
     * 
     * @type {Array<PrintSession>}
     * @memberof PaginatedPrintSessionList
     */
    results?: Array<PrintSession>;
}
/**
 * 
 * @export
 * @interface PaginatedPrintSessionStateList
 */
export interface PaginatedPrintSessionStateList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedPrintSessionStateList
     */
    count?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedPrintSessionStateList
     */
    next?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedPrintSessionStateList
     */
    previous?: string | null;
    /**
     * 
     * @type {Array<PrintSessionState>}
     * @memberof PaginatedPrintSessionStateList
     */
    results?: Array<PrintSessionState>;
}
/**
 * 
 * @export
 * @interface PaginatedPrinterProfileList
 */
export interface PaginatedPrinterProfileList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedPrinterProfileList
     */
    count?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedPrinterProfileList
     */
    next?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedPrinterProfileList
     */
    previous?: string | null;
    /**
     * 
     * @type {Array<PrinterProfile>}
     * @memberof PaginatedPrinterProfileList
     */
    results?: Array<PrinterProfile>;
}
/**
 * 
 * @export
 * @interface PaginatedRemoteControlCommandList
 */
export interface PaginatedRemoteControlCommandList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedRemoteControlCommandList
     */
    count?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedRemoteControlCommandList
     */
    next?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedRemoteControlCommandList
     */
    previous?: string | null;
    /**
     * 
     * @type {Array<RemoteControlCommand>}
     * @memberof PaginatedRemoteControlCommandList
     */
    results?: Array<RemoteControlCommand>;
}
/**
 * 
 * @export
 * @interface PaginatedUserList
 */
export interface PaginatedUserList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedUserList
     */
    count?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedUserList
     */
    next?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedUserList
     */
    previous?: string | null;
    /**
     * 
     * @type {Array<User>}
     * @memberof PaginatedUserList
     */
    results?: Array<User>;
}
/**
 * Serializer used in POST /api/alerts/seen and POST /api/alerts/dismiss requests
 * @export
 * @interface PatchedAlertBulkRequestRequest
 */
export interface PatchedAlertBulkRequestRequest {
    /**
     * 
     * @type {Array<number>}
     * @memberof PatchedAlertBulkRequestRequest
     */
    ids?: Array<number>;
}
/**
 * @type PatchedAlertPolymorphicRequest
 * @export
 */
export type PatchedAlertPolymorphicRequest = PatchedAlertRequest | PatchedManualVideoUploadAlertRequest | PatchedPrintSessionAlertRequest | PatchedProgressAlertRequest | PatchedRemoteControlCommandAlertRequest;

/**
 * 
 * @export
 * @interface PatchedAlertRequest
 */
export interface PatchedAlertRequest {
    /**
     * 
     * @type {boolean}
     * @memberof PatchedAlertRequest
     */
    seen?: boolean;
}
/**
 * @type PatchedAlertSettingsPolymorphicRequest
 * @export
 */
export type PatchedAlertSettingsPolymorphicRequest = PatchedAlertSettingsRequest | PatchedCommandAlertSettingsRequest | PatchedProgressAlertSettingsRequest;

/**
 * 
 * @export
 * @interface PatchedAlertSettingsRequest
 */
export interface PatchedAlertSettingsRequest {
    /**
     * 
     * @type {AlertTypeEnum}
     * @memberof PatchedAlertSettingsRequest
     */
    alert_type?: AlertTypeEnum;
    /**
     * 
     * @type {Array<AlertMethodsEnum>}
     * @memberof PatchedAlertSettingsRequest
     */
    alert_methods?: Array<AlertMethodsEnum>;
    /**
     * Enable or disable this alert channel
     * @type {boolean}
     * @memberof PatchedAlertSettingsRequest
     */
    enabled?: boolean;
}
/**
 * 
 * @export
 * @interface PatchedCommandAlertSettingsRequest
 */
export interface PatchedCommandAlertSettingsRequest {
    /**
     * 
     * @type {AlertTypeEnum}
     * @memberof PatchedCommandAlertSettingsRequest
     */
    alert_type?: AlertTypeEnum;
    /**
     * 
     * @type {Array<AlertMethodsEnum>}
     * @memberof PatchedCommandAlertSettingsRequest
     */
    alert_methods?: Array<AlertMethodsEnum>;
    /**
     * Enable or disable this alert channel
     * @type {boolean}
     * @memberof PatchedCommandAlertSettingsRequest
     */
    enabled?: boolean;
    /**
     * Fires on <strong>MonitoringStop<strong> updates.   Helps debug unexpected Print Nanny crashes.
     * @type {Array<MoveNozzleEnum>}
     * @memberof PatchedCommandAlertSettingsRequest
     */
    monitoring_stop?: Array<MoveNozzleEnum>;
    /**
     * Fires on <strong>MonitoringStop</strong> updates. Helpful if you want to confirm monitoring started without a problem.
     * @type {Array<MoveNozzleEnum>}
     * @memberof PatchedCommandAlertSettingsRequest
     */
    monitoring_start?: Array<MoveNozzleEnum>;
    /**
     * Fires on <strong>StopPrint</strong> updates. Get notified as soon as a print job finishes. 
     * @type {Array<MoveNozzleEnum>}
     * @memberof PatchedCommandAlertSettingsRequest
     */
    print_start?: Array<MoveNozzleEnum>;
    /**
     * Fires on <strong>PrintStart</strong> command status changes. Helpful for verifying a print job started without a problem.
     * @type {Array<MoveNozzleEnum>}
     * @memberof PatchedCommandAlertSettingsRequest
     */
    print_stop?: Array<MoveNozzleEnum>;
    /**
     * Fires on <strong>PausePrint</strong> command status changes. Helpful for verifying a print was paused successfully.
     * @type {Array<MoveNozzleEnum>}
     * @memberof PatchedCommandAlertSettingsRequest
     */
    print_pause?: Array<MoveNozzleEnum>;
    /**
     * Fires on <strong>ResumePrint</strong> command status changes Helpful for verifying a print was resumed.
     * @type {Array<MoveNozzleEnum>}
     * @memberof PatchedCommandAlertSettingsRequest
     */
    print_resume?: Array<MoveNozzleEnum>;
    /**
     * Fires on <strong>MoveNozzle</strong>command status changes. Helpful for debugging connectivity between Print Nanny and OctoPrint
     * @type {Array<MoveNozzleEnum>}
     * @memberof PatchedCommandAlertSettingsRequest
     */
    move_nozzle?: Array<MoveNozzleEnum>;
}
/**
 * 
 * @export
 * @interface PatchedDeviceCalibrationRequest
 */
export interface PatchedDeviceCalibrationRequest {
    /**
     * 
     * @type {number}
     * @memberof PatchedDeviceCalibrationRequest
     */
    octoprint_device?: number;
    /**
     * 
     * @type {number}
     * @memberof PatchedDeviceCalibrationRequest
     */
    fpm?: number | null;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof PatchedDeviceCalibrationRequest
     */
    coordinates?: { [key: string]: any; } | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof PatchedDeviceCalibrationRequest
     */
    mask?: Array<number>;
    /**
     * 
     * @type {any}
     * @memberof PatchedDeviceCalibrationRequest
     */
    config_file?: any | null;
}
/**
 * 
 * @export
 * @interface PatchedGcodeFileRequest
 */
export interface PatchedGcodeFileRequest {
    /**
     * 
     * @type {string}
     * @memberof PatchedGcodeFileRequest
     */
    name?: string;
    /**
     * 
     * @type {any}
     * @memberof PatchedGcodeFileRequest
     */
    file?: any;
    /**
     * 
     * @type {string}
     * @memberof PatchedGcodeFileRequest
     */
    file_hash?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedGcodeFileRequest
     */
    octoprint_device?: string;
}
/**
 * 
 * @export
 * @interface PatchedManualVideoUploadAlertRequest
 */
export interface PatchedManualVideoUploadAlertRequest {
    /**
     * 
     * @type {AlertTypeEnum}
     * @memberof PatchedManualVideoUploadAlertRequest
     */
    alert_type?: AlertTypeEnum;
}
/**
 * 
 * @export
 * @interface PatchedOctoPrintDeviceRequest
 */
export interface PatchedOctoPrintDeviceRequest {
    /**
     * 
     * @type {string}
     * @memberof PatchedOctoPrintDeviceRequest
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof PatchedOctoPrintDeviceRequest
     */
    last_session?: number | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedOctoPrintDeviceRequest
     */
    model?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedOctoPrintDeviceRequest
     */
    platform?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PatchedOctoPrintDeviceRequest
     */
    cpu_flags?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof PatchedOctoPrintDeviceRequest
     */
    hardware?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedOctoPrintDeviceRequest
     */
    revision?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedOctoPrintDeviceRequest
     */
    serial?: string;
    /**
     * 
     * @type {number}
     * @memberof PatchedOctoPrintDeviceRequest
     */
    cores?: number;
    /**
     * 
     * @type {number}
     * @memberof PatchedOctoPrintDeviceRequest
     */
    ram?: number;
    /**
     * 
     * @type {string}
     * @memberof PatchedOctoPrintDeviceRequest
     */
    python_version?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedOctoPrintDeviceRequest
     */
    pip_version?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedOctoPrintDeviceRequest
     */
    virtualenv?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedOctoPrintDeviceRequest
     */
    monitoring_active?: boolean;
    /**
     * 
     * @type {MonitoringModeEnum}
     * @memberof PatchedOctoPrintDeviceRequest
     */
    monitoring_mode?: MonitoringModeEnum;
    /**
     * 
     * @type {string}
     * @memberof PatchedOctoPrintDeviceRequest
     */
    octoprint_version?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedOctoPrintDeviceRequest
     */
    plugin_version?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedOctoPrintDeviceRequest
     */
    print_nanny_client_version?: string;
}
/**
 * 
 * @export
 * @interface PatchedPrintSessionAlertRequest
 */
export interface PatchedPrintSessionAlertRequest {
    /**
     * 
     * @type {boolean}
     * @memberof PatchedPrintSessionAlertRequest
     */
    seen?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedPrintSessionAlertRequest
     */
    sent?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedPrintSessionAlertRequest
     */
    needs_review?: boolean;
    /**
     * 
     * @type {PrintSessionAlertAlertSubtypeEnum}
     * @memberof PatchedPrintSessionAlertRequest
     */
    alert_subtype?: PrintSessionAlertAlertSubtypeEnum;
    /**
     * 
     * @type {any}
     * @memberof PatchedPrintSessionAlertRequest
     */
    annotated_video?: any;
    /**
     * 
     * @type {number}
     * @memberof PatchedPrintSessionAlertRequest
     */
    print_session?: number;
}
/**
 * 
 * @export
 * @interface PatchedPrintSessionRequest
 */
export interface PatchedPrintSessionRequest {
    /**
     * 
     * @type {number}
     * @memberof PatchedPrintSessionRequest
     */
    octoprint_device?: number;
    /**
     * 
     * @type {string}
     * @memberof PatchedPrintSessionRequest
     */
    session?: string;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof PatchedPrintSessionRequest
     */
    progress?: { [key: string]: any; };
    /**
     * 
     * @type {StatusEnum}
     * @memberof PatchedPrintSessionRequest
     */
    status?: StatusEnum;
    /**
     * 
     * @type {number}
     * @memberof PatchedPrintSessionRequest
     */
    printer_profile?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedPrintSessionRequest
     */
    gcode_file?: number | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedPrintSessionRequest
     */
    gcode_filename?: string | null;
}
/**
 * 
 * @export
 * @interface PatchedPrinterProfileRequest
 */
export interface PatchedPrinterProfileRequest {
    /**
     * 
     * @type {number}
     * @memberof PatchedPrinterProfileRequest
     */
    octoprint_device?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedPrinterProfileRequest
     */
    axes_e_inverted?: boolean | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedPrinterProfileRequest
     */
    axes_e_speed?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedPrinterProfileRequest
     */
    axes_x_speed?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedPrinterProfileRequest
     */
    axes_x_inverted?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedPrinterProfileRequest
     */
    axes_y_inverted?: boolean | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedPrinterProfileRequest
     */
    axes_y_speed?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedPrinterProfileRequest
     */
    axes_z_inverted?: boolean | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedPrinterProfileRequest
     */
    axes_z_speed?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedPrinterProfileRequest
     */
    extruder_count?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedPrinterProfileRequest
     */
    extruder_nozzle_diameter?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedPrinterProfileRequest
     */
    extruder_shared_nozzle?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedPrinterProfileRequest
     */
    heated_bed?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedPrinterProfileRequest
     */
    heated_chamber?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedPrinterProfileRequest
     */
    model?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedPrinterProfileRequest
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedPrinterProfileRequest
     */
    octoprint_key?: string;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof PatchedPrinterProfileRequest
     */
    volume_custom_box?: { [key: string]: any; };
    /**
     * 
     * @type {number}
     * @memberof PatchedPrinterProfileRequest
     */
    volume_depth?: number | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedPrinterProfileRequest
     */
    volume_formfactor?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedPrinterProfileRequest
     */
    volume_height?: number | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedPrinterProfileRequest
     */
    volume_origin?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedPrinterProfileRequest
     */
    volume_width?: number | null;
}
/**
 * 
 * @export
 * @interface PatchedProgressAlertRequest
 */
export interface PatchedProgressAlertRequest {
    /**
     * 
     * @type {boolean}
     * @memberof PatchedProgressAlertRequest
     */
    seen?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedProgressAlertRequest
     */
    sent?: boolean;
    /**
     * Progress notification interval. Example: 25 will notify you at 25%, 50%, 75%, and 100% progress
     * @type {number}
     * @memberof PatchedProgressAlertRequest
     */
    progress_percent?: number;
    /**
     * 
     * @type {number}
     * @memberof PatchedProgressAlertRequest
     */
    octoprint_device?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedProgressAlertRequest
     */
    device?: number;
}
/**
 * 
 * @export
 * @interface PatchedProgressAlertSettingsRequest
 */
export interface PatchedProgressAlertSettingsRequest {
    /**
     * 
     * @type {AlertTypeEnum}
     * @memberof PatchedProgressAlertSettingsRequest
     */
    alert_type?: AlertTypeEnum;
    /**
     * 
     * @type {Array<AlertMethodsEnum>}
     * @memberof PatchedProgressAlertSettingsRequest
     */
    alert_methods?: Array<AlertMethodsEnum>;
    /**
     * Enable or disable this alert channel
     * @type {boolean}
     * @memberof PatchedProgressAlertSettingsRequest
     */
    enabled?: boolean;
    /**
     * Progress notification interval. Example: 25 will notify you at 25%, 50%, 75%, and 100% progress
     * @type {number}
     * @memberof PatchedProgressAlertSettingsRequest
     */
    on_progress_percent?: number;
}
/**
 * 
 * @export
 * @interface PatchedRemoteControlCommandAlertRequest
 */
export interface PatchedRemoteControlCommandAlertRequest {
    /**
     * 
     * @type {RemoteControlCommandAlertAlertSubtypeEnum}
     * @memberof PatchedRemoteControlCommandAlertRequest
     */
    alert_subtype?: RemoteControlCommandAlertAlertSubtypeEnum;
    /**
     * 
     * @type {Array<AlertMethodsEnum>}
     * @memberof PatchedRemoteControlCommandAlertRequest
     */
    alert_methods?: Array<AlertMethodsEnum>;
    /**
     * 
     * @type {AlertTypeEnum}
     * @memberof PatchedRemoteControlCommandAlertRequest
     */
    alert_type?: AlertTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof PatchedRemoteControlCommandAlertRequest
     */
    color?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedRemoteControlCommandAlertRequest
     */
    icon?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedRemoteControlCommandAlertRequest
     */
    description?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedRemoteControlCommandAlertRequest
     */
    seen?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PatchedRemoteControlCommandAlertRequest
     */
    title?: string;
}
/**
 * 
 * @export
 * @interface PatchedRemoteControlCommandRequest
 */
export interface PatchedRemoteControlCommandRequest {
    /**
     * 
     * @type {CommandEnum}
     * @memberof PatchedRemoteControlCommandRequest
     */
    command?: CommandEnum;
    /**
     * 
     * @type {number}
     * @memberof PatchedRemoteControlCommandRequest
     */
    user?: number;
    /**
     * 
     * @type {number}
     * @memberof PatchedRemoteControlCommandRequest
     */
    device?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedRemoteControlCommandRequest
     */
    received?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedRemoteControlCommandRequest
     */
    success?: boolean | null;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof PatchedRemoteControlCommandRequest
     */
    iotcore_response?: { [key: string]: any; };
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof PatchedRemoteControlCommandRequest
     */
    metadata?: { [key: string]: any; };
}
/**
 * 
 * @export
 * @interface PatchedUserRequest
 */
export interface PatchedUserRequest {
    /**
     * 
     * @type {string}
     * @memberof PatchedUserRequest
     */
    email?: string;
}
/**
 * 
 * @export
 * @interface PluginEvent
 */
export interface PluginEvent {
    /**
     * 
     * @type {number}
     * @memberof PluginEvent
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof PluginEvent
     */
    created_dt?: string;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof PluginEvent
     */
    event_data?: { [key: string]: any; } | null;
    /**
     * 
     * @type {number}
     * @memberof PluginEvent
     */
    device: number;
    /**
     * 
     * @type {number}
     * @memberof PluginEvent
     */
    user?: number;
    /**
     * 
     * @type {string}
     * @memberof PluginEvent
     */
    plugin_version: string;
    /**
     * 
     * @type {string}
     * @memberof PluginEvent
     */
    client_version: string;
    /**
     * 
     * @type {string}
     * @memberof PluginEvent
     */
    octoprint_version: string;
    /**
     * 
     * @type {PluginEventEventTypeEnum}
     * @memberof PluginEvent
     */
    event_type: PluginEventEventTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof PluginEvent
     */
    url?: string;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum PluginEventEventTypeEnum {
    DeviceRegisterStart = 'device_register_start',
    DeviceRegisterDone = 'device_register_done',
    DeviceRegisterFailed = 'device_register_failed',
    PrinterProfileSyncStart = 'printer_profile_sync_start',
    PrinterProfileSyncDone = 'printer_profile_sync_done',
    PrinterProfileSyncFailed = 'printer_profile_sync_failed'
}

/**
 * 
 * @export
 * @interface PrintSession
 */
export interface PrintSession {
    /**
     * 
     * @type {number}
     * @memberof PrintSession
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof PrintSession
     */
    created_dt?: string;
    /**
     * 
     * @type {string}
     * @memberof PrintSession
     */
    updated_dt?: string;
    /**
     * 
     * @type {number}
     * @memberof PrintSession
     */
    octoprint_device: number;
    /**
     * 
     * @type {string}
     * @memberof PrintSession
     */
    session: string;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof PrintSession
     */
    progress?: { [key: string]: any; };
    /**
     * 
     * @type {StatusEnum}
     * @memberof PrintSession
     */
    status?: StatusEnum;
    /**
     * 
     * @type {number}
     * @memberof PrintSession
     */
    user?: number;
    /**
     * 
     * @type {number}
     * @memberof PrintSession
     */
    printer_profile?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PrintSession
     */
    gcode_file?: number | null;
    /**
     * 
     * @type {string}
     * @memberof PrintSession
     */
    gcode_filename?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PrintSession
     */
    url?: string;
    /**
     * 
     * @type {string}
     * @memberof PrintSession
     */
    should_alert?: string;
}
/**
 * 
 * @export
 * @interface PrintSessionAlert
 */
export interface PrintSessionAlert {
    /**
     * 
     * @type {number}
     * @memberof PrintSessionAlert
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof PrintSessionAlert
     */
    time?: string;
    /**
     * 
     * @type {Array<AlertMethodsEnum>}
     * @memberof PrintSessionAlert
     */
    alert_methods?: Array<AlertMethodsEnum>;
    /**
     * 
     * @type {AlertTypeEnum}
     * @memberof PrintSessionAlert
     */
    alert_type?: AlertTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof PrintSessionAlert
     */
    created_dt?: string;
    /**
     * 
     * @type {string}
     * @memberof PrintSessionAlert
     */
    updated_dt?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PrintSessionAlert
     */
    seen?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PrintSessionAlert
     */
    sent?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PrintSessionAlert
     */
    needs_review?: boolean;
    /**
     * 
     * @type {PrintSessionAlertAlertSubtypeEnum}
     * @memberof PrintSessionAlert
     */
    alert_subtype?: PrintSessionAlertAlertSubtypeEnum;
    /**
     * 
     * @type {string}
     * @memberof PrintSessionAlert
     */
    annotated_video: string;
    /**
     * 
     * @type {number}
     * @memberof PrintSessionAlert
     */
    polymorphic_ctype?: number;
    /**
     * 
     * @type {number}
     * @memberof PrintSessionAlert
     */
    user?: number;
    /**
     * 
     * @type {number}
     * @memberof PrintSessionAlert
     */
    octoprint_device?: number;
    /**
     * 
     * @type {number}
     * @memberof PrintSessionAlert
     */
    print_session: number;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum PrintSessionAlertAlertSubtypeEnum {
    Success = 'SUCCESS',
    Failure = 'FAILURE'
}

/**
 * 
 * @export
 * @interface PrintSessionAlertRequest
 */
export interface PrintSessionAlertRequest {
    /**
     * 
     * @type {boolean}
     * @memberof PrintSessionAlertRequest
     */
    seen?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PrintSessionAlertRequest
     */
    sent?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PrintSessionAlertRequest
     */
    needs_review?: boolean;
    /**
     * 
     * @type {PrintSessionAlertAlertSubtypeEnum}
     * @memberof PrintSessionAlertRequest
     */
    alert_subtype?: PrintSessionAlertAlertSubtypeEnum;
    /**
     * 
     * @type {any}
     * @memberof PrintSessionAlertRequest
     */
    annotated_video: any;
    /**
     * 
     * @type {number}
     * @memberof PrintSessionAlertRequest
     */
    print_session: number;
}
/**
 * 
 * @export
 * @interface PrintSessionRequest
 */
export interface PrintSessionRequest {
    /**
     * 
     * @type {number}
     * @memberof PrintSessionRequest
     */
    octoprint_device: number;
    /**
     * 
     * @type {string}
     * @memberof PrintSessionRequest
     */
    session: string;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof PrintSessionRequest
     */
    progress?: { [key: string]: any; };
    /**
     * 
     * @type {StatusEnum}
     * @memberof PrintSessionRequest
     */
    status?: StatusEnum;
    /**
     * 
     * @type {number}
     * @memberof PrintSessionRequest
     */
    printer_profile?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PrintSessionRequest
     */
    gcode_file?: number | null;
    /**
     * 
     * @type {string}
     * @memberof PrintSessionRequest
     */
    gcode_filename?: string | null;
}
/**
 * 
 * @export
 * @interface PrintSessionState
 */
export interface PrintSessionState {
    /**
     * 
     * @type {number}
     * @memberof PrintSessionState
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof PrintSessionState
     */
    created_dt?: string;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof PrintSessionState
     */
    event_data?: { [key: string]: any; } | null;
    /**
     * 
     * @type {number}
     * @memberof PrintSessionState
     */
    device: number;
    /**
     * 
     * @type {number}
     * @memberof PrintSessionState
     */
    user?: number;
    /**
     * 
     * @type {string}
     * @memberof PrintSessionState
     */
    plugin_version: string;
    /**
     * 
     * @type {string}
     * @memberof PrintSessionState
     */
    client_version: string;
    /**
     * 
     * @type {string}
     * @memberof PrintSessionState
     */
    octoprint_version: string;
    /**
     * 
     * @type {PrintSessionStateEventTypeEnum}
     * @memberof PrintSessionState
     */
    event_type: PrintSessionStateEventTypeEnum;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof PrintSessionState
     */
    state?: { [key: string]: any; };
    /**
     * 
     * @type {number}
     * @memberof PrintSessionState
     */
    current_z?: number | null;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof PrintSessionState
     */
    progress?: { [key: string]: any; };
    /**
     * 
     * @type {string}
     * @memberof PrintSessionState
     */
    job_data_file: string;
    /**
     * 
     * @type {number}
     * @memberof PrintSessionState
     */
    print_session?: number | null;
    /**
     * 
     * @type {string}
     * @memberof PrintSessionState
     */
    url?: string;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum PrintSessionStateEventTypeEnum {
    Error = 'Error',
    PrintCancelled = 'PrintCancelled',
    PrintCancelling = 'PrintCancelling',
    PrintDone = 'PrintDone',
    PrintFailed = 'PrintFailed',
    PrintPaused = 'PrintPaused',
    PrintResumed = 'PrintResumed',
    PrintStarted = 'PrintStarted'
}

/**
 * 
 * @export
 * @interface PrinterProfile
 */
export interface PrinterProfile {
    /**
     * 
     * @type {number}
     * @memberof PrinterProfile
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof PrinterProfile
     */
    user?: number;
    /**
     * 
     * @type {number}
     * @memberof PrinterProfile
     */
    octoprint_device: number;
    /**
     * 
     * @type {boolean}
     * @memberof PrinterProfile
     */
    axes_e_inverted?: boolean | null;
    /**
     * 
     * @type {number}
     * @memberof PrinterProfile
     */
    axes_e_speed?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PrinterProfile
     */
    axes_x_speed?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof PrinterProfile
     */
    axes_x_inverted?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof PrinterProfile
     */
    axes_y_inverted?: boolean | null;
    /**
     * 
     * @type {number}
     * @memberof PrinterProfile
     */
    axes_y_speed?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof PrinterProfile
     */
    axes_z_inverted?: boolean | null;
    /**
     * 
     * @type {number}
     * @memberof PrinterProfile
     */
    axes_z_speed?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PrinterProfile
     */
    extruder_count?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PrinterProfile
     */
    extruder_nozzle_diameter?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof PrinterProfile
     */
    extruder_shared_nozzle?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof PrinterProfile
     */
    heated_bed?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof PrinterProfile
     */
    heated_chamber?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof PrinterProfile
     */
    model?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PrinterProfile
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof PrinterProfile
     */
    octoprint_key: string;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof PrinterProfile
     */
    volume_custom_box?: { [key: string]: any; };
    /**
     * 
     * @type {number}
     * @memberof PrinterProfile
     */
    volume_depth?: number | null;
    /**
     * 
     * @type {string}
     * @memberof PrinterProfile
     */
    volume_formfactor?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PrinterProfile
     */
    volume_height?: number | null;
    /**
     * 
     * @type {string}
     * @memberof PrinterProfile
     */
    volume_origin?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PrinterProfile
     */
    volume_width?: number | null;
    /**
     * 
     * @type {string}
     * @memberof PrinterProfile
     */
    url?: string;
}
/**
 * 
 * @export
 * @interface PrinterProfileRequest
 */
export interface PrinterProfileRequest {
    /**
     * 
     * @type {number}
     * @memberof PrinterProfileRequest
     */
    octoprint_device: number;
    /**
     * 
     * @type {boolean}
     * @memberof PrinterProfileRequest
     */
    axes_e_inverted?: boolean | null;
    /**
     * 
     * @type {number}
     * @memberof PrinterProfileRequest
     */
    axes_e_speed?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PrinterProfileRequest
     */
    axes_x_speed?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof PrinterProfileRequest
     */
    axes_x_inverted?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof PrinterProfileRequest
     */
    axes_y_inverted?: boolean | null;
    /**
     * 
     * @type {number}
     * @memberof PrinterProfileRequest
     */
    axes_y_speed?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof PrinterProfileRequest
     */
    axes_z_inverted?: boolean | null;
    /**
     * 
     * @type {number}
     * @memberof PrinterProfileRequest
     */
    axes_z_speed?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PrinterProfileRequest
     */
    extruder_count?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PrinterProfileRequest
     */
    extruder_nozzle_diameter?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof PrinterProfileRequest
     */
    extruder_shared_nozzle?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof PrinterProfileRequest
     */
    heated_bed?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof PrinterProfileRequest
     */
    heated_chamber?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof PrinterProfileRequest
     */
    model?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PrinterProfileRequest
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof PrinterProfileRequest
     */
    octoprint_key: string;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof PrinterProfileRequest
     */
    volume_custom_box?: { [key: string]: any; };
    /**
     * 
     * @type {number}
     * @memberof PrinterProfileRequest
     */
    volume_depth?: number | null;
    /**
     * 
     * @type {string}
     * @memberof PrinterProfileRequest
     */
    volume_formfactor?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PrinterProfileRequest
     */
    volume_height?: number | null;
    /**
     * 
     * @type {string}
     * @memberof PrinterProfileRequest
     */
    volume_origin?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PrinterProfileRequest
     */
    volume_width?: number | null;
}
/**
 * 
 * @export
 * @interface ProgressAlert
 */
export interface ProgressAlert {
    /**
     * 
     * @type {number}
     * @memberof ProgressAlert
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof ProgressAlert
     */
    time?: string;
    /**
     * 
     * @type {Array<AlertMethodsEnum>}
     * @memberof ProgressAlert
     */
    alert_methods?: Array<AlertMethodsEnum>;
    /**
     * 
     * @type {AlertTypeEnum}
     * @memberof ProgressAlert
     */
    alert_type?: AlertTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ProgressAlert
     */
    created_dt?: string;
    /**
     * 
     * @type {string}
     * @memberof ProgressAlert
     */
    updated_dt?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ProgressAlert
     */
    seen?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ProgressAlert
     */
    sent?: boolean;
    /**
     * Progress notification interval. Example: 25 will notify you at 25%, 50%, 75%, and 100% progress
     * @type {number}
     * @memberof ProgressAlert
     */
    progress_percent?: number;
    /**
     * 
     * @type {number}
     * @memberof ProgressAlert
     */
    polymorphic_ctype?: number;
    /**
     * 
     * @type {number}
     * @memberof ProgressAlert
     */
    user?: number;
    /**
     * 
     * @type {number}
     * @memberof ProgressAlert
     */
    octoprint_device?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ProgressAlert
     */
    device: number;
}
/**
 * 
 * @export
 * @interface ProgressAlertRequest
 */
export interface ProgressAlertRequest {
    /**
     * 
     * @type {boolean}
     * @memberof ProgressAlertRequest
     */
    seen?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ProgressAlertRequest
     */
    sent?: boolean;
    /**
     * Progress notification interval. Example: 25 will notify you at 25%, 50%, 75%, and 100% progress
     * @type {number}
     * @memberof ProgressAlertRequest
     */
    progress_percent?: number;
    /**
     * 
     * @type {number}
     * @memberof ProgressAlertRequest
     */
    octoprint_device?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ProgressAlertRequest
     */
    device: number;
}
/**
 * 
 * @export
 * @interface ProgressAlertSettings
 */
export interface ProgressAlertSettings {
    /**
     * 
     * @type {number}
     * @memberof ProgressAlertSettings
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof ProgressAlertSettings
     */
    created_dt?: string;
    /**
     * 
     * @type {string}
     * @memberof ProgressAlertSettings
     */
    updated_dt?: string;
    /**
     * 
     * @type {AlertTypeEnum}
     * @memberof ProgressAlertSettings
     */
    alert_type: AlertTypeEnum;
    /**
     * 
     * @type {Array<AlertMethodsEnum>}
     * @memberof ProgressAlertSettings
     */
    alert_methods?: Array<AlertMethodsEnum>;
    /**
     * Enable or disable this alert channel
     * @type {boolean}
     * @memberof ProgressAlertSettings
     */
    enabled?: boolean;
    /**
     * Progress notification interval. Example: 25 will notify you at 25%, 50%, 75%, and 100% progress
     * @type {number}
     * @memberof ProgressAlertSettings
     */
    on_progress_percent?: number;
    /**
     * 
     * @type {number}
     * @memberof ProgressAlertSettings
     */
    polymorphic_ctype?: number;
    /**
     * 
     * @type {number}
     * @memberof ProgressAlertSettings
     */
    user?: number;
}
/**
 * 
 * @export
 * @interface ProgressAlertSettingsRequest
 */
export interface ProgressAlertSettingsRequest {
    /**
     * 
     * @type {AlertTypeEnum}
     * @memberof ProgressAlertSettingsRequest
     */
    alert_type: AlertTypeEnum;
    /**
     * 
     * @type {Array<AlertMethodsEnum>}
     * @memberof ProgressAlertSettingsRequest
     */
    alert_methods?: Array<AlertMethodsEnum>;
    /**
     * Enable or disable this alert channel
     * @type {boolean}
     * @memberof ProgressAlertSettingsRequest
     */
    enabled?: boolean;
    /**
     * Progress notification interval. Example: 25 will notify you at 25%, 50%, 75%, and 100% progress
     * @type {number}
     * @memberof ProgressAlertSettingsRequest
     */
    on_progress_percent?: number;
}
/**
 * 
 * @export
 * @interface RemoteControlCommand
 */
export interface RemoteControlCommand {
    /**
     * 
     * @type {number}
     * @memberof RemoteControlCommand
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof RemoteControlCommand
     */
    created_dt?: string;
    /**
     * 
     * @type {CommandEnum}
     * @memberof RemoteControlCommand
     */
    command: CommandEnum;
    /**
     * 
     * @type {number}
     * @memberof RemoteControlCommand
     */
    user: number;
    /**
     * 
     * @type {number}
     * @memberof RemoteControlCommand
     */
    device: number;
    /**
     * 
     * @type {boolean}
     * @memberof RemoteControlCommand
     */
    received?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof RemoteControlCommand
     */
    success?: boolean | null;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof RemoteControlCommand
     */
    iotcore_response?: { [key: string]: any; };
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof RemoteControlCommand
     */
    metadata?: { [key: string]: any; };
    /**
     * 
     * @type {string}
     * @memberof RemoteControlCommand
     */
    url?: string;
    /**
     * 
     * @type {string}
     * @memberof RemoteControlCommand
     */
    octoprint_event_type?: string;
}
/**
 * 
 * @export
 * @interface RemoteControlCommandAlert
 */
export interface RemoteControlCommandAlert {
    /**
     * 
     * @type {RemoteControlCommandAlertAlertSubtypeEnum}
     * @memberof RemoteControlCommandAlert
     */
    alert_subtype: RemoteControlCommandAlertAlertSubtypeEnum;
    /**
     * 
     * @type {Array<AlertMethodsEnum>}
     * @memberof RemoteControlCommandAlert
     */
    alert_methods?: Array<AlertMethodsEnum>;
    /**
     * 
     * @type {AlertTypeEnum}
     * @memberof RemoteControlCommandAlert
     */
    alert_type: AlertTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof RemoteControlCommandAlert
     */
    color: string;
    /**
     * 
     * @type {string}
     * @memberof RemoteControlCommandAlert
     */
    created_dt?: string;
    /**
     * 
     * @type {string}
     * @memberof RemoteControlCommandAlert
     */
    dashboard_url?: string;
    /**
     * 
     * @type {string}
     * @memberof RemoteControlCommandAlert
     */
    metadata?: string;
    /**
     * 
     * @type {string}
     * @memberof RemoteControlCommandAlert
     */
    icon: string;
    /**
     * 
     * @type {number}
     * @memberof RemoteControlCommandAlert
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof RemoteControlCommandAlert
     */
    time?: string;
    /**
     * 
     * @type {string}
     * @memberof RemoteControlCommandAlert
     */
    description: string;
    /**
     * 
     * @type {boolean}
     * @memberof RemoteControlCommandAlert
     */
    seen?: boolean;
    /**
     * 
     * @type {string}
     * @memberof RemoteControlCommandAlert
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof RemoteControlCommandAlert
     */
    updated_dt?: string;
    /**
     * 
     * @type {number}
     * @memberof RemoteControlCommandAlert
     */
    user?: number;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum RemoteControlCommandAlertAlertSubtypeEnum {
    Received = 'RECEIVED',
    Success = 'SUCCESS',
    Failed = 'FAILED'
}

/**
 * 
 * @export
 * @interface RemoteControlCommandAlertRequest
 */
export interface RemoteControlCommandAlertRequest {
    /**
     * 
     * @type {RemoteControlCommandAlertAlertSubtypeEnum}
     * @memberof RemoteControlCommandAlertRequest
     */
    alert_subtype: RemoteControlCommandAlertAlertSubtypeEnum;
    /**
     * 
     * @type {Array<AlertMethodsEnum>}
     * @memberof RemoteControlCommandAlertRequest
     */
    alert_methods?: Array<AlertMethodsEnum>;
    /**
     * 
     * @type {AlertTypeEnum}
     * @memberof RemoteControlCommandAlertRequest
     */
    alert_type: AlertTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof RemoteControlCommandAlertRequest
     */
    color: string;
    /**
     * 
     * @type {string}
     * @memberof RemoteControlCommandAlertRequest
     */
    icon: string;
    /**
     * 
     * @type {string}
     * @memberof RemoteControlCommandAlertRequest
     */
    description: string;
    /**
     * 
     * @type {boolean}
     * @memberof RemoteControlCommandAlertRequest
     */
    seen?: boolean;
    /**
     * 
     * @type {string}
     * @memberof RemoteControlCommandAlertRequest
     */
    title: string;
}
/**
 * 
 * @export
 * @interface RemoteControlCommandRequest
 */
export interface RemoteControlCommandRequest {
    /**
     * 
     * @type {CommandEnum}
     * @memberof RemoteControlCommandRequest
     */
    command: CommandEnum;
    /**
     * 
     * @type {number}
     * @memberof RemoteControlCommandRequest
     */
    user: number;
    /**
     * 
     * @type {number}
     * @memberof RemoteControlCommandRequest
     */
    device: number;
    /**
     * 
     * @type {boolean}
     * @memberof RemoteControlCommandRequest
     */
    received?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof RemoteControlCommandRequest
     */
    success?: boolean | null;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof RemoteControlCommandRequest
     */
    iotcore_response?: { [key: string]: any; };
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof RemoteControlCommandRequest
     */
    metadata?: { [key: string]: any; };
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum StatusEnum {
    MonitoringActive = 'monitoring_active',
    RenderingVideo = 'rendering_video',
    DoneATimelapseOfYourPrintJobIsReady = 'doneA timelapse of your print job is ready!'
}

/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    url?: string;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    id?: number;
}
/**
 * 
 * @export
 * @interface UserRequest
 */
export interface UserRequest {
    /**
     * 
     * @type {string}
     * @memberof UserRequest
     */
    email: string;
}

/**
 * AlertSettingsApi - axios parameter creator
 * @export
 */
export const AlertSettingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAlertSettingsList: async (page?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/alert_settings/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAlertSettingsMethodsRetrieve: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/alert_settings/methods/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this alert settings.
         * @param {PatchedAlertSettingsPolymorphicRequest} [patchedAlertSettingsPolymorphicRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAlertSettingsPartialUpdate: async (id: number, patchedAlertSettingsPolymorphicRequest?: PatchedAlertSettingsPolymorphicRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiAlertSettingsPartialUpdate.');
            }
            const localVarPath = `/api/alert_settings/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof patchedAlertSettingsPolymorphicRequest !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(patchedAlertSettingsPolymorphicRequest !== undefined ? patchedAlertSettingsPolymorphicRequest : {})
                : (patchedAlertSettingsPolymorphicRequest || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this alert settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAlertSettingsRetrieve: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiAlertSettingsRetrieve.');
            }
            const localVarPath = `/api/alert_settings/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this alert settings.
         * @param {AlertSettingsPolymorphicRequest} [alertSettingsPolymorphicRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAlertSettingsUpdate: async (id: number, alertSettingsPolymorphicRequest?: AlertSettingsPolymorphicRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiAlertSettingsUpdate.');
            }
            const localVarPath = `/api/alert_settings/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof alertSettingsPolymorphicRequest !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(alertSettingsPolymorphicRequest !== undefined ? alertSettingsPolymorphicRequest : {})
                : (alertSettingsPolymorphicRequest || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AlertSettingsApi - functional programming interface
 * @export
 */
export const AlertSettingsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAlertSettingsList(page?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedAlertSettingsPolymorphicList>> {
            const localVarAxiosArgs = await AlertSettingsApiAxiosParamCreator(configuration).apiAlertSettingsList(page, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAlertSettingsMethodsRetrieve(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AlertMethod>> {
            const localVarAxiosArgs = await AlertSettingsApiAxiosParamCreator(configuration).apiAlertSettingsMethodsRetrieve(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this alert settings.
         * @param {PatchedAlertSettingsPolymorphicRequest} [patchedAlertSettingsPolymorphicRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAlertSettingsPartialUpdate(id: number, patchedAlertSettingsPolymorphicRequest?: PatchedAlertSettingsPolymorphicRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AlertSettingsPolymorphic>> {
            const localVarAxiosArgs = await AlertSettingsApiAxiosParamCreator(configuration).apiAlertSettingsPartialUpdate(id, patchedAlertSettingsPolymorphicRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this alert settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAlertSettingsRetrieve(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AlertSettingsPolymorphic>> {
            const localVarAxiosArgs = await AlertSettingsApiAxiosParamCreator(configuration).apiAlertSettingsRetrieve(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this alert settings.
         * @param {AlertSettingsPolymorphicRequest} [alertSettingsPolymorphicRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAlertSettingsUpdate(id: number, alertSettingsPolymorphicRequest?: AlertSettingsPolymorphicRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AlertSettingsPolymorphic>> {
            const localVarAxiosArgs = await AlertSettingsApiAxiosParamCreator(configuration).apiAlertSettingsUpdate(id, alertSettingsPolymorphicRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AlertSettingsApi - factory interface
 * @export
 */
export const AlertSettingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAlertSettingsList(page?: number, options?: any): AxiosPromise<PaginatedAlertSettingsPolymorphicList> {
            return AlertSettingsApiFp(configuration).apiAlertSettingsList(page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAlertSettingsMethodsRetrieve(options?: any): AxiosPromise<AlertMethod> {
            return AlertSettingsApiFp(configuration).apiAlertSettingsMethodsRetrieve(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this alert settings.
         * @param {PatchedAlertSettingsPolymorphicRequest} [patchedAlertSettingsPolymorphicRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAlertSettingsPartialUpdate(id: number, patchedAlertSettingsPolymorphicRequest?: PatchedAlertSettingsPolymorphicRequest, options?: any): AxiosPromise<AlertSettingsPolymorphic> {
            return AlertSettingsApiFp(configuration).apiAlertSettingsPartialUpdate(id, patchedAlertSettingsPolymorphicRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this alert settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAlertSettingsRetrieve(id: number, options?: any): AxiosPromise<AlertSettingsPolymorphic> {
            return AlertSettingsApiFp(configuration).apiAlertSettingsRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this alert settings.
         * @param {AlertSettingsPolymorphicRequest} [alertSettingsPolymorphicRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAlertSettingsUpdate(id: number, alertSettingsPolymorphicRequest?: AlertSettingsPolymorphicRequest, options?: any): AxiosPromise<AlertSettingsPolymorphic> {
            return AlertSettingsApiFp(configuration).apiAlertSettingsUpdate(id, alertSettingsPolymorphicRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AlertSettingsApi - interface
 * @export
 * @interface AlertSettingsApi
 */
export interface AlertSettingsApiInterface {
    /**
     * 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertSettingsApiInterface
     */
    apiAlertSettingsList(page?: number, options?: any): AxiosPromise<PaginatedAlertSettingsPolymorphicList>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertSettingsApiInterface
     */
    apiAlertSettingsMethodsRetrieve(options?: any): AxiosPromise<AlertMethod>;

    /**
     * 
     * @param {number} id A unique integer value identifying this alert settings.
     * @param {PatchedAlertSettingsPolymorphicRequest} [patchedAlertSettingsPolymorphicRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertSettingsApiInterface
     */
    apiAlertSettingsPartialUpdate(id: number, patchedAlertSettingsPolymorphicRequest?: PatchedAlertSettingsPolymorphicRequest, options?: any): AxiosPromise<AlertSettingsPolymorphic>;

    /**
     * 
     * @param {number} id A unique integer value identifying this alert settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertSettingsApiInterface
     */
    apiAlertSettingsRetrieve(id: number, options?: any): AxiosPromise<AlertSettingsPolymorphic>;

    /**
     * 
     * @param {number} id A unique integer value identifying this alert settings.
     * @param {AlertSettingsPolymorphicRequest} [alertSettingsPolymorphicRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertSettingsApiInterface
     */
    apiAlertSettingsUpdate(id: number, alertSettingsPolymorphicRequest?: AlertSettingsPolymorphicRequest, options?: any): AxiosPromise<AlertSettingsPolymorphic>;

}

/**
 * AlertSettingsApi - object-oriented interface
 * @export
 * @class AlertSettingsApi
 * @extends {BaseAPI}
 */
export class AlertSettingsApi extends BaseAPI implements AlertSettingsApiInterface {
    /**
     * 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertSettingsApi
     */
    public apiAlertSettingsList(page?: number, options?: any) {
        return AlertSettingsApiFp(this.configuration).apiAlertSettingsList(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertSettingsApi
     */
    public apiAlertSettingsMethodsRetrieve(options?: any) {
        return AlertSettingsApiFp(this.configuration).apiAlertSettingsMethodsRetrieve(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this alert settings.
     * @param {PatchedAlertSettingsPolymorphicRequest} [patchedAlertSettingsPolymorphicRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertSettingsApi
     */
    public apiAlertSettingsPartialUpdate(id: number, patchedAlertSettingsPolymorphicRequest?: PatchedAlertSettingsPolymorphicRequest, options?: any) {
        return AlertSettingsApiFp(this.configuration).apiAlertSettingsPartialUpdate(id, patchedAlertSettingsPolymorphicRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this alert settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertSettingsApi
     */
    public apiAlertSettingsRetrieve(id: number, options?: any) {
        return AlertSettingsApiFp(this.configuration).apiAlertSettingsRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this alert settings.
     * @param {AlertSettingsPolymorphicRequest} [alertSettingsPolymorphicRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertSettingsApi
     */
    public apiAlertSettingsUpdate(id: number, alertSettingsPolymorphicRequest?: AlertSettingsPolymorphicRequest, options?: any) {
        return AlertSettingsApiFp(this.configuration).apiAlertSettingsUpdate(id, alertSettingsPolymorphicRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AlertsApi - axios parameter creator
 * @export
 */
export const AlertsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {PatchedAlertBulkRequestRequest} [patchedAlertBulkRequestRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertsSeen: async (patchedAlertBulkRequestRequest?: PatchedAlertBulkRequestRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/alerts/seen/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof patchedAlertBulkRequestRequest !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(patchedAlertBulkRequestRequest !== undefined ? patchedAlertBulkRequestRequest : {})
                : (patchedAlertBulkRequestRequest || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAlertsList: async (page?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/alerts/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this alert.
         * @param {PatchedAlertPolymorphicRequest} [patchedAlertPolymorphicRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAlertsPartialUpdate: async (id: number, patchedAlertPolymorphicRequest?: PatchedAlertPolymorphicRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiAlertsPartialUpdate.');
            }
            const localVarPath = `/api/alerts/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof patchedAlertPolymorphicRequest !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(patchedAlertPolymorphicRequest !== undefined ? patchedAlertPolymorphicRequest : {})
                : (patchedAlertPolymorphicRequest || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAlertsRecentRetrieve: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/alerts/recent/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this alert.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAlertsRetrieve: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiAlertsRetrieve.');
            }
            const localVarPath = `/api/alerts/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAlertsUnreadRetrieve: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/alerts/unread/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this alert.
         * @param {AlertPolymorphicRequest} [alertPolymorphicRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAlertsUpdate: async (id: number, alertPolymorphicRequest?: AlertPolymorphicRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiAlertsUpdate.');
            }
            const localVarPath = `/api/alerts/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof alertPolymorphicRequest !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(alertPolymorphicRequest !== undefined ? alertPolymorphicRequest : {})
                : (alertPolymorphicRequest || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPrintSessionAlertsList: async (page?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/print-session-alerts/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPrintSessionAlertsRetrieve: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiPrintSessionAlertsRetrieve.');
            }
            const localVarPath = `/api/print-session-alerts/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreatePrintSessionAlertRequest} createPrintSessionAlertRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        printSessionAlertCreate: async (createPrintSessionAlertRequest: CreatePrintSessionAlertRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'createPrintSessionAlertRequest' is not null or undefined
            if (createPrintSessionAlertRequest === null || createPrintSessionAlertRequest === undefined) {
                throw new RequiredError('createPrintSessionAlertRequest','Required parameter createPrintSessionAlertRequest was null or undefined when calling printSessionAlertCreate.');
            }
            const localVarPath = `/api/print-session-alerts/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof createPrintSessionAlertRequest !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(createPrintSessionAlertRequest !== undefined ? createPrintSessionAlertRequest : {})
                : (createPrintSessionAlertRequest || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AlertsApi - functional programming interface
 * @export
 */
export const AlertsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {PatchedAlertBulkRequestRequest} [patchedAlertBulkRequestRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async alertsSeen(patchedAlertBulkRequestRequest?: PatchedAlertBulkRequestRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AlertBulkResponse>> {
            const localVarAxiosArgs = await AlertsApiAxiosParamCreator(configuration).alertsSeen(patchedAlertBulkRequestRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAlertsList(page?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedAlertPolymorphicList>> {
            const localVarAxiosArgs = await AlertsApiAxiosParamCreator(configuration).apiAlertsList(page, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this alert.
         * @param {PatchedAlertPolymorphicRequest} [patchedAlertPolymorphicRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAlertsPartialUpdate(id: number, patchedAlertPolymorphicRequest?: PatchedAlertPolymorphicRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AlertPolymorphic>> {
            const localVarAxiosArgs = await AlertsApiAxiosParamCreator(configuration).apiAlertsPartialUpdate(id, patchedAlertPolymorphicRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAlertsRecentRetrieve(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AlertPolymorphic>> {
            const localVarAxiosArgs = await AlertsApiAxiosParamCreator(configuration).apiAlertsRecentRetrieve(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this alert.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAlertsRetrieve(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AlertPolymorphic>> {
            const localVarAxiosArgs = await AlertsApiAxiosParamCreator(configuration).apiAlertsRetrieve(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAlertsUnreadRetrieve(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AlertPolymorphic>> {
            const localVarAxiosArgs = await AlertsApiAxiosParamCreator(configuration).apiAlertsUnreadRetrieve(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this alert.
         * @param {AlertPolymorphicRequest} [alertPolymorphicRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAlertsUpdate(id: number, alertPolymorphicRequest?: AlertPolymorphicRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AlertPolymorphic>> {
            const localVarAxiosArgs = await AlertsApiAxiosParamCreator(configuration).apiAlertsUpdate(id, alertPolymorphicRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPrintSessionAlertsList(page?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedPrintSessionAlertList>> {
            const localVarAxiosArgs = await AlertsApiAxiosParamCreator(configuration).apiPrintSessionAlertsList(page, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPrintSessionAlertsRetrieve(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PrintSessionAlert>> {
            const localVarAxiosArgs = await AlertsApiAxiosParamCreator(configuration).apiPrintSessionAlertsRetrieve(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {CreatePrintSessionAlertRequest} createPrintSessionAlertRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async printSessionAlertCreate(createPrintSessionAlertRequest: CreatePrintSessionAlertRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PrintSessionAlert>> {
            const localVarAxiosArgs = await AlertsApiAxiosParamCreator(configuration).printSessionAlertCreate(createPrintSessionAlertRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AlertsApi - factory interface
 * @export
 */
export const AlertsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {PatchedAlertBulkRequestRequest} [patchedAlertBulkRequestRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertsSeen(patchedAlertBulkRequestRequest?: PatchedAlertBulkRequestRequest, options?: any): AxiosPromise<AlertBulkResponse> {
            return AlertsApiFp(configuration).alertsSeen(patchedAlertBulkRequestRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAlertsList(page?: number, options?: any): AxiosPromise<PaginatedAlertPolymorphicList> {
            return AlertsApiFp(configuration).apiAlertsList(page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this alert.
         * @param {PatchedAlertPolymorphicRequest} [patchedAlertPolymorphicRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAlertsPartialUpdate(id: number, patchedAlertPolymorphicRequest?: PatchedAlertPolymorphicRequest, options?: any): AxiosPromise<AlertPolymorphic> {
            return AlertsApiFp(configuration).apiAlertsPartialUpdate(id, patchedAlertPolymorphicRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAlertsRecentRetrieve(options?: any): AxiosPromise<AlertPolymorphic> {
            return AlertsApiFp(configuration).apiAlertsRecentRetrieve(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this alert.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAlertsRetrieve(id: number, options?: any): AxiosPromise<AlertPolymorphic> {
            return AlertsApiFp(configuration).apiAlertsRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAlertsUnreadRetrieve(options?: any): AxiosPromise<AlertPolymorphic> {
            return AlertsApiFp(configuration).apiAlertsUnreadRetrieve(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this alert.
         * @param {AlertPolymorphicRequest} [alertPolymorphicRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAlertsUpdate(id: number, alertPolymorphicRequest?: AlertPolymorphicRequest, options?: any): AxiosPromise<AlertPolymorphic> {
            return AlertsApiFp(configuration).apiAlertsUpdate(id, alertPolymorphicRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPrintSessionAlertsList(page?: number, options?: any): AxiosPromise<PaginatedPrintSessionAlertList> {
            return AlertsApiFp(configuration).apiPrintSessionAlertsList(page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPrintSessionAlertsRetrieve(id: string, options?: any): AxiosPromise<PrintSessionAlert> {
            return AlertsApiFp(configuration).apiPrintSessionAlertsRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreatePrintSessionAlertRequest} createPrintSessionAlertRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        printSessionAlertCreate(createPrintSessionAlertRequest: CreatePrintSessionAlertRequest, options?: any): AxiosPromise<PrintSessionAlert> {
            return AlertsApiFp(configuration).printSessionAlertCreate(createPrintSessionAlertRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AlertsApi - interface
 * @export
 * @interface AlertsApi
 */
export interface AlertsApiInterface {
    /**
     * 
     * @param {PatchedAlertBulkRequestRequest} [patchedAlertBulkRequestRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertsApiInterface
     */
    alertsSeen(patchedAlertBulkRequestRequest?: PatchedAlertBulkRequestRequest, options?: any): AxiosPromise<AlertBulkResponse>;

    /**
     * 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertsApiInterface
     */
    apiAlertsList(page?: number, options?: any): AxiosPromise<PaginatedAlertPolymorphicList>;

    /**
     * 
     * @param {number} id A unique integer value identifying this alert.
     * @param {PatchedAlertPolymorphicRequest} [patchedAlertPolymorphicRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertsApiInterface
     */
    apiAlertsPartialUpdate(id: number, patchedAlertPolymorphicRequest?: PatchedAlertPolymorphicRequest, options?: any): AxiosPromise<AlertPolymorphic>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertsApiInterface
     */
    apiAlertsRecentRetrieve(options?: any): AxiosPromise<AlertPolymorphic>;

    /**
     * 
     * @param {number} id A unique integer value identifying this alert.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertsApiInterface
     */
    apiAlertsRetrieve(id: number, options?: any): AxiosPromise<AlertPolymorphic>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertsApiInterface
     */
    apiAlertsUnreadRetrieve(options?: any): AxiosPromise<AlertPolymorphic>;

    /**
     * 
     * @param {number} id A unique integer value identifying this alert.
     * @param {AlertPolymorphicRequest} [alertPolymorphicRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertsApiInterface
     */
    apiAlertsUpdate(id: number, alertPolymorphicRequest?: AlertPolymorphicRequest, options?: any): AxiosPromise<AlertPolymorphic>;

    /**
     * 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertsApiInterface
     */
    apiPrintSessionAlertsList(page?: number, options?: any): AxiosPromise<PaginatedPrintSessionAlertList>;

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertsApiInterface
     */
    apiPrintSessionAlertsRetrieve(id: string, options?: any): AxiosPromise<PrintSessionAlert>;

    /**
     * 
     * @param {CreatePrintSessionAlertRequest} createPrintSessionAlertRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertsApiInterface
     */
    printSessionAlertCreate(createPrintSessionAlertRequest: CreatePrintSessionAlertRequest, options?: any): AxiosPromise<PrintSessionAlert>;

}

/**
 * AlertsApi - object-oriented interface
 * @export
 * @class AlertsApi
 * @extends {BaseAPI}
 */
export class AlertsApi extends BaseAPI implements AlertsApiInterface {
    /**
     * 
     * @param {PatchedAlertBulkRequestRequest} [patchedAlertBulkRequestRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertsApi
     */
    public alertsSeen(patchedAlertBulkRequestRequest?: PatchedAlertBulkRequestRequest, options?: any) {
        return AlertsApiFp(this.configuration).alertsSeen(patchedAlertBulkRequestRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertsApi
     */
    public apiAlertsList(page?: number, options?: any) {
        return AlertsApiFp(this.configuration).apiAlertsList(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this alert.
     * @param {PatchedAlertPolymorphicRequest} [patchedAlertPolymorphicRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertsApi
     */
    public apiAlertsPartialUpdate(id: number, patchedAlertPolymorphicRequest?: PatchedAlertPolymorphicRequest, options?: any) {
        return AlertsApiFp(this.configuration).apiAlertsPartialUpdate(id, patchedAlertPolymorphicRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertsApi
     */
    public apiAlertsRecentRetrieve(options?: any) {
        return AlertsApiFp(this.configuration).apiAlertsRecentRetrieve(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this alert.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertsApi
     */
    public apiAlertsRetrieve(id: number, options?: any) {
        return AlertsApiFp(this.configuration).apiAlertsRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertsApi
     */
    public apiAlertsUnreadRetrieve(options?: any) {
        return AlertsApiFp(this.configuration).apiAlertsUnreadRetrieve(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this alert.
     * @param {AlertPolymorphicRequest} [alertPolymorphicRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertsApi
     */
    public apiAlertsUpdate(id: number, alertPolymorphicRequest?: AlertPolymorphicRequest, options?: any) {
        return AlertsApiFp(this.configuration).apiAlertsUpdate(id, alertPolymorphicRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertsApi
     */
    public apiPrintSessionAlertsList(page?: number, options?: any) {
        return AlertsApiFp(this.configuration).apiPrintSessionAlertsList(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertsApi
     */
    public apiPrintSessionAlertsRetrieve(id: string, options?: any) {
        return AlertsApiFp(this.configuration).apiPrintSessionAlertsRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreatePrintSessionAlertRequest} createPrintSessionAlertRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertsApi
     */
    public printSessionAlertCreate(createPrintSessionAlertRequest: CreatePrintSessionAlertRequest, options?: any) {
        return AlertsApiFp(this.configuration).printSessionAlertCreate(createPrintSessionAlertRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ApiApi - axios parameter creator
 * @export
 */
export const ApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} username 
         * @param {string} password 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthTokenCreate: async (username: string, password: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling apiAuthTokenCreate.');
            }
            // verify required parameter 'password' is not null or undefined
            if (password === null || password === undefined) {
                throw new RequiredError('password','Required parameter password was null or undefined when calling apiAuthTokenCreate.');
            }
            const localVarPath = `/api/auth-token/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


            if (username !== undefined) { 
                localVarFormParams.append('username', username as any);
            }
    
            if (password !== undefined) { 
                localVarFormParams.append('password', password as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json
         * @param {'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant'} [lang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSchemaRetrieve: async (lang?: 'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant', options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/schema/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (lang !== undefined) {
                localVarQueryParameter['lang'] = lang;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersList: async (page?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/users/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersMeRetrieve: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/users/me/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this user.
         * @param {PatchedUserRequest} [patchedUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersPartialUpdate: async (id: number, patchedUserRequest?: PatchedUserRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiUsersPartialUpdate.');
            }
            const localVarPath = `/api/users/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof patchedUserRequest !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(patchedUserRequest !== undefined ? patchedUserRequest : {})
                : (patchedUserRequest || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersRetrieve: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiUsersRetrieve.');
            }
            const localVarPath = `/api/users/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this user.
         * @param {UserRequest} userRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersUpdate: async (id: number, userRequest: UserRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiUsersUpdate.');
            }
            // verify required parameter 'userRequest' is not null or undefined
            if (userRequest === null || userRequest === undefined) {
                throw new RequiredError('userRequest','Required parameter userRequest was null or undefined when calling apiUsersUpdate.');
            }
            const localVarPath = `/api/users/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof userRequest !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(userRequest !== undefined ? userRequest : {})
                : (userRequest || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApiApi - functional programming interface
 * @export
 */
export const ApiApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} username 
         * @param {string} password 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthTokenCreate(username: string, password: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthToken>> {
            const localVarAxiosArgs = await ApiApiAxiosParamCreator(configuration).apiAuthTokenCreate(username, password, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json
         * @param {'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant'} [lang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSchemaRetrieve(lang?: 'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: any; }>> {
            const localVarAxiosArgs = await ApiApiAxiosParamCreator(configuration).apiSchemaRetrieve(lang, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersList(page?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedUserList>> {
            const localVarAxiosArgs = await ApiApiAxiosParamCreator(configuration).apiUsersList(page, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersMeRetrieve(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await ApiApiAxiosParamCreator(configuration).apiUsersMeRetrieve(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this user.
         * @param {PatchedUserRequest} [patchedUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersPartialUpdate(id: number, patchedUserRequest?: PatchedUserRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await ApiApiAxiosParamCreator(configuration).apiUsersPartialUpdate(id, patchedUserRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersRetrieve(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await ApiApiAxiosParamCreator(configuration).apiUsersRetrieve(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this user.
         * @param {UserRequest} userRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersUpdate(id: number, userRequest: UserRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await ApiApiAxiosParamCreator(configuration).apiUsersUpdate(id, userRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ApiApi - factory interface
 * @export
 */
export const ApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} username 
         * @param {string} password 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthTokenCreate(username: string, password: string, options?: any): AxiosPromise<AuthToken> {
            return ApiApiFp(configuration).apiAuthTokenCreate(username, password, options).then((request) => request(axios, basePath));
        },
        /**
         * OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json
         * @param {'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant'} [lang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSchemaRetrieve(lang?: 'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant', options?: any): AxiosPromise<{ [key: string]: any; }> {
            return ApiApiFp(configuration).apiSchemaRetrieve(lang, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersList(page?: number, options?: any): AxiosPromise<PaginatedUserList> {
            return ApiApiFp(configuration).apiUsersList(page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersMeRetrieve(options?: any): AxiosPromise<User> {
            return ApiApiFp(configuration).apiUsersMeRetrieve(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this user.
         * @param {PatchedUserRequest} [patchedUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersPartialUpdate(id: number, patchedUserRequest?: PatchedUserRequest, options?: any): AxiosPromise<User> {
            return ApiApiFp(configuration).apiUsersPartialUpdate(id, patchedUserRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersRetrieve(id: number, options?: any): AxiosPromise<User> {
            return ApiApiFp(configuration).apiUsersRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this user.
         * @param {UserRequest} userRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersUpdate(id: number, userRequest: UserRequest, options?: any): AxiosPromise<User> {
            return ApiApiFp(configuration).apiUsersUpdate(id, userRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ApiApi - interface
 * @export
 * @interface ApiApi
 */
export interface ApiApiInterface {
    /**
     * 
     * @param {string} username 
     * @param {string} password 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApiInterface
     */
    apiAuthTokenCreate(username: string, password: string, options?: any): AxiosPromise<AuthToken>;

    /**
     * OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json
     * @param {'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant'} [lang] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApiInterface
     */
    apiSchemaRetrieve(lang?: 'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant', options?: any): AxiosPromise<{ [key: string]: any; }>;

    /**
     * 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApiInterface
     */
    apiUsersList(page?: number, options?: any): AxiosPromise<PaginatedUserList>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApiInterface
     */
    apiUsersMeRetrieve(options?: any): AxiosPromise<User>;

    /**
     * 
     * @param {number} id A unique integer value identifying this user.
     * @param {PatchedUserRequest} [patchedUserRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApiInterface
     */
    apiUsersPartialUpdate(id: number, patchedUserRequest?: PatchedUserRequest, options?: any): AxiosPromise<User>;

    /**
     * 
     * @param {number} id A unique integer value identifying this user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApiInterface
     */
    apiUsersRetrieve(id: number, options?: any): AxiosPromise<User>;

    /**
     * 
     * @param {number} id A unique integer value identifying this user.
     * @param {UserRequest} userRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApiInterface
     */
    apiUsersUpdate(id: number, userRequest: UserRequest, options?: any): AxiosPromise<User>;

}

/**
 * ApiApi - object-oriented interface
 * @export
 * @class ApiApi
 * @extends {BaseAPI}
 */
export class ApiApi extends BaseAPI implements ApiApiInterface {
    /**
     * 
     * @param {string} username 
     * @param {string} password 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public apiAuthTokenCreate(username: string, password: string, options?: any) {
        return ApiApiFp(this.configuration).apiAuthTokenCreate(username, password, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json
     * @param {'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant'} [lang] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public apiSchemaRetrieve(lang?: 'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant', options?: any) {
        return ApiApiFp(this.configuration).apiSchemaRetrieve(lang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public apiUsersList(page?: number, options?: any) {
        return ApiApiFp(this.configuration).apiUsersList(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public apiUsersMeRetrieve(options?: any) {
        return ApiApiFp(this.configuration).apiUsersMeRetrieve(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this user.
     * @param {PatchedUserRequest} [patchedUserRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public apiUsersPartialUpdate(id: number, patchedUserRequest?: PatchedUserRequest, options?: any) {
        return ApiApiFp(this.configuration).apiUsersPartialUpdate(id, patchedUserRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public apiUsersRetrieve(id: number, options?: any) {
        return ApiApiFp(this.configuration).apiUsersRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this user.
     * @param {UserRequest} userRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public apiUsersUpdate(id: number, userRequest: UserRequest, options?: any) {
        return ApiApiFp(this.configuration).apiUsersUpdate(id, userRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * EventsApi - axios parameter creator
 * @export
 */
export const EventsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {OctoPrintEventRequest} octoPrintEventRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOctoprintEventsCreate: async (octoPrintEventRequest: OctoPrintEventRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'octoPrintEventRequest' is not null or undefined
            if (octoPrintEventRequest === null || octoPrintEventRequest === undefined) {
                throw new RequiredError('octoPrintEventRequest','Required parameter octoPrintEventRequest was null or undefined when calling apiOctoprintEventsCreate.');
            }
            const localVarPath = `/api/octoprint-events/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof octoPrintEventRequest !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(octoPrintEventRequest !== undefined ? octoPrintEventRequest : {})
                : (octoPrintEventRequest || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOctoprintEventsList: async (page?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/octoprint-events/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this octo print event.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOctoprintEventsRetrieve: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiOctoprintEventsRetrieve.');
            }
            const localVarPath = `/api/octoprint-events/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPluginEventsList: async (page?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/plugin-events/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this plugin event.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPluginEventsRetrieve: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiPluginEventsRetrieve.');
            }
            const localVarPath = `/api/plugin-events/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPrintJobStatesList: async (page?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/print-job-states/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this print session state.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPrintJobStatesRetrieve: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiPrintJobStatesRetrieve.');
            }
            const localVarPath = `/api/print-job-states/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintCoreEventsEnumRetrieve: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/octoprint-events/enum/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pluginEventsEnumRetrieve: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/plugin-events/enum/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        printSessionEventEnumRetrieve: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/print-job-states/enum/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EventsApi - functional programming interface
 * @export
 */
export const EventsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {OctoPrintEventRequest} octoPrintEventRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOctoprintEventsCreate(octoPrintEventRequest: OctoPrintEventRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OctoPrintEvent>> {
            const localVarAxiosArgs = await EventsApiAxiosParamCreator(configuration).apiOctoprintEventsCreate(octoPrintEventRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOctoprintEventsList(page?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedOctoPrintEventList>> {
            const localVarAxiosArgs = await EventsApiAxiosParamCreator(configuration).apiOctoprintEventsList(page, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this octo print event.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOctoprintEventsRetrieve(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OctoPrintEvent>> {
            const localVarAxiosArgs = await EventsApiAxiosParamCreator(configuration).apiOctoprintEventsRetrieve(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPluginEventsList(page?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedPluginEventList>> {
            const localVarAxiosArgs = await EventsApiAxiosParamCreator(configuration).apiPluginEventsList(page, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this plugin event.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPluginEventsRetrieve(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PluginEvent>> {
            const localVarAxiosArgs = await EventsApiAxiosParamCreator(configuration).apiPluginEventsRetrieve(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPrintJobStatesList(page?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedPrintSessionStateList>> {
            const localVarAxiosArgs = await EventsApiAxiosParamCreator(configuration).apiPrintJobStatesList(page, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this print session state.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPrintJobStatesRetrieve(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PrintSessionState>> {
            const localVarAxiosArgs = await EventsApiAxiosParamCreator(configuration).apiPrintJobStatesRetrieve(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async octoprintCoreEventsEnumRetrieve(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await EventsApiAxiosParamCreator(configuration).octoprintCoreEventsEnumRetrieve(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pluginEventsEnumRetrieve(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await EventsApiAxiosParamCreator(configuration).pluginEventsEnumRetrieve(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async printSessionEventEnumRetrieve(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await EventsApiAxiosParamCreator(configuration).printSessionEventEnumRetrieve(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * EventsApi - factory interface
 * @export
 */
export const EventsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {OctoPrintEventRequest} octoPrintEventRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOctoprintEventsCreate(octoPrintEventRequest: OctoPrintEventRequest, options?: any): AxiosPromise<OctoPrintEvent> {
            return EventsApiFp(configuration).apiOctoprintEventsCreate(octoPrintEventRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOctoprintEventsList(page?: number, options?: any): AxiosPromise<PaginatedOctoPrintEventList> {
            return EventsApiFp(configuration).apiOctoprintEventsList(page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this octo print event.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOctoprintEventsRetrieve(id: number, options?: any): AxiosPromise<OctoPrintEvent> {
            return EventsApiFp(configuration).apiOctoprintEventsRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPluginEventsList(page?: number, options?: any): AxiosPromise<PaginatedPluginEventList> {
            return EventsApiFp(configuration).apiPluginEventsList(page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this plugin event.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPluginEventsRetrieve(id: number, options?: any): AxiosPromise<PluginEvent> {
            return EventsApiFp(configuration).apiPluginEventsRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPrintJobStatesList(page?: number, options?: any): AxiosPromise<PaginatedPrintSessionStateList> {
            return EventsApiFp(configuration).apiPrintJobStatesList(page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this print session state.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPrintJobStatesRetrieve(id: number, options?: any): AxiosPromise<PrintSessionState> {
            return EventsApiFp(configuration).apiPrintJobStatesRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintCoreEventsEnumRetrieve(options?: any): AxiosPromise<string> {
            return EventsApiFp(configuration).octoprintCoreEventsEnumRetrieve(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pluginEventsEnumRetrieve(options?: any): AxiosPromise<string> {
            return EventsApiFp(configuration).pluginEventsEnumRetrieve(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        printSessionEventEnumRetrieve(options?: any): AxiosPromise<string> {
            return EventsApiFp(configuration).printSessionEventEnumRetrieve(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EventsApi - interface
 * @export
 * @interface EventsApi
 */
export interface EventsApiInterface {
    /**
     * 
     * @param {OctoPrintEventRequest} octoPrintEventRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApiInterface
     */
    apiOctoprintEventsCreate(octoPrintEventRequest: OctoPrintEventRequest, options?: any): AxiosPromise<OctoPrintEvent>;

    /**
     * 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApiInterface
     */
    apiOctoprintEventsList(page?: number, options?: any): AxiosPromise<PaginatedOctoPrintEventList>;

    /**
     * 
     * @param {number} id A unique integer value identifying this octo print event.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApiInterface
     */
    apiOctoprintEventsRetrieve(id: number, options?: any): AxiosPromise<OctoPrintEvent>;

    /**
     * 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApiInterface
     */
    apiPluginEventsList(page?: number, options?: any): AxiosPromise<PaginatedPluginEventList>;

    /**
     * 
     * @param {number} id A unique integer value identifying this plugin event.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApiInterface
     */
    apiPluginEventsRetrieve(id: number, options?: any): AxiosPromise<PluginEvent>;

    /**
     * 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApiInterface
     */
    apiPrintJobStatesList(page?: number, options?: any): AxiosPromise<PaginatedPrintSessionStateList>;

    /**
     * 
     * @param {number} id A unique integer value identifying this print session state.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApiInterface
     */
    apiPrintJobStatesRetrieve(id: number, options?: any): AxiosPromise<PrintSessionState>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApiInterface
     */
    octoprintCoreEventsEnumRetrieve(options?: any): AxiosPromise<string>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApiInterface
     */
    pluginEventsEnumRetrieve(options?: any): AxiosPromise<string>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApiInterface
     */
    printSessionEventEnumRetrieve(options?: any): AxiosPromise<string>;

}

/**
 * EventsApi - object-oriented interface
 * @export
 * @class EventsApi
 * @extends {BaseAPI}
 */
export class EventsApi extends BaseAPI implements EventsApiInterface {
    /**
     * 
     * @param {OctoPrintEventRequest} octoPrintEventRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public apiOctoprintEventsCreate(octoPrintEventRequest: OctoPrintEventRequest, options?: any) {
        return EventsApiFp(this.configuration).apiOctoprintEventsCreate(octoPrintEventRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public apiOctoprintEventsList(page?: number, options?: any) {
        return EventsApiFp(this.configuration).apiOctoprintEventsList(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this octo print event.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public apiOctoprintEventsRetrieve(id: number, options?: any) {
        return EventsApiFp(this.configuration).apiOctoprintEventsRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public apiPluginEventsList(page?: number, options?: any) {
        return EventsApiFp(this.configuration).apiPluginEventsList(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this plugin event.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public apiPluginEventsRetrieve(id: number, options?: any) {
        return EventsApiFp(this.configuration).apiPluginEventsRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public apiPrintJobStatesList(page?: number, options?: any) {
        return EventsApiFp(this.configuration).apiPrintJobStatesList(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this print session state.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public apiPrintJobStatesRetrieve(id: number, options?: any) {
        return EventsApiFp(this.configuration).apiPrintJobStatesRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public octoprintCoreEventsEnumRetrieve(options?: any) {
        return EventsApiFp(this.configuration).octoprintCoreEventsEnumRetrieve(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public pluginEventsEnumRetrieve(options?: any) {
        return EventsApiFp(this.configuration).pluginEventsEnumRetrieve(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public printSessionEventEnumRetrieve(options?: any) {
        return EventsApiFp(this.configuration).printSessionEventEnumRetrieve(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MlOpsApi - axios parameter creator
 * @export
 */
export const MlOpsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDeviceCalibrationsList: async (page?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/device-calibrations/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this device calibration.
         * @param {PatchedDeviceCalibrationRequest} [patchedDeviceCalibrationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDeviceCalibrationsPartialUpdate: async (id: number, patchedDeviceCalibrationRequest?: PatchedDeviceCalibrationRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiDeviceCalibrationsPartialUpdate.');
            }
            const localVarPath = `/api/device-calibrations/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof patchedDeviceCalibrationRequest !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(patchedDeviceCalibrationRequest !== undefined ? patchedDeviceCalibrationRequest : {})
                : (patchedDeviceCalibrationRequest || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this device calibration.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDeviceCalibrationsRetrieve: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiDeviceCalibrationsRetrieve.');
            }
            const localVarPath = `/api/device-calibrations/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this device calibration.
         * @param {DeviceCalibrationRequest} deviceCalibrationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDeviceCalibrationsUpdate: async (id: number, deviceCalibrationRequest: DeviceCalibrationRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiDeviceCalibrationsUpdate.');
            }
            // verify required parameter 'deviceCalibrationRequest' is not null or undefined
            if (deviceCalibrationRequest === null || deviceCalibrationRequest === undefined) {
                throw new RequiredError('deviceCalibrationRequest','Required parameter deviceCalibrationRequest was null or undefined when calling apiDeviceCalibrationsUpdate.');
            }
            const localVarPath = `/api/device-calibrations/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof deviceCalibrationRequest !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(deviceCalibrationRequest !== undefined ? deviceCalibrationRequest : {})
                : (deviceCalibrationRequest || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiExperimentDeviceConfigsList: async (page?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/experiment-device-configs/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this experiment device config.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiExperimentDeviceConfigsRetrieve: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiExperimentDeviceConfigsRetrieve.');
            }
            const localVarPath = `/api/experiment-device-configs/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiExperimentsList: async (page?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/experiments/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this experiment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiExperimentsRetrieve: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiExperimentsRetrieve.');
            }
            const localVarPath = `/api/experiments/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiModelArtifactsList: async (page?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/model-artifacts/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this model artifact.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiModelArtifactsRetrieve: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiModelArtifactsRetrieve.');
            }
            const localVarPath = `/api/model-artifacts/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DeviceCalibrationRequest} deviceCalibrationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceCalibrationUpdateOrCreate: async (deviceCalibrationRequest: DeviceCalibrationRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceCalibrationRequest' is not null or undefined
            if (deviceCalibrationRequest === null || deviceCalibrationRequest === undefined) {
                throw new RequiredError('deviceCalibrationRequest','Required parameter deviceCalibrationRequest was null or undefined when calling deviceCalibrationUpdateOrCreate.');
            }
            const localVarPath = `/api/device-calibrations/update-or-create/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof deviceCalibrationRequest !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(deviceCalibrationRequest !== undefined ? deviceCalibrationRequest : {})
                : (deviceCalibrationRequest || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MlOpsApi - functional programming interface
 * @export
 */
export const MlOpsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDeviceCalibrationsList(page?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedDeviceCalibrationList>> {
            const localVarAxiosArgs = await MlOpsApiAxiosParamCreator(configuration).apiDeviceCalibrationsList(page, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this device calibration.
         * @param {PatchedDeviceCalibrationRequest} [patchedDeviceCalibrationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDeviceCalibrationsPartialUpdate(id: number, patchedDeviceCalibrationRequest?: PatchedDeviceCalibrationRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceCalibration>> {
            const localVarAxiosArgs = await MlOpsApiAxiosParamCreator(configuration).apiDeviceCalibrationsPartialUpdate(id, patchedDeviceCalibrationRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this device calibration.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDeviceCalibrationsRetrieve(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceCalibration>> {
            const localVarAxiosArgs = await MlOpsApiAxiosParamCreator(configuration).apiDeviceCalibrationsRetrieve(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this device calibration.
         * @param {DeviceCalibrationRequest} deviceCalibrationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDeviceCalibrationsUpdate(id: number, deviceCalibrationRequest: DeviceCalibrationRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceCalibration>> {
            const localVarAxiosArgs = await MlOpsApiAxiosParamCreator(configuration).apiDeviceCalibrationsUpdate(id, deviceCalibrationRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiExperimentDeviceConfigsList(page?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedExperimentDeviceConfigList>> {
            const localVarAxiosArgs = await MlOpsApiAxiosParamCreator(configuration).apiExperimentDeviceConfigsList(page, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this experiment device config.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiExperimentDeviceConfigsRetrieve(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExperimentDeviceConfig>> {
            const localVarAxiosArgs = await MlOpsApiAxiosParamCreator(configuration).apiExperimentDeviceConfigsRetrieve(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiExperimentsList(page?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedExperimentList>> {
            const localVarAxiosArgs = await MlOpsApiAxiosParamCreator(configuration).apiExperimentsList(page, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this experiment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiExperimentsRetrieve(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Experiment>> {
            const localVarAxiosArgs = await MlOpsApiAxiosParamCreator(configuration).apiExperimentsRetrieve(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiModelArtifactsList(page?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedModelArtifactList>> {
            const localVarAxiosArgs = await MlOpsApiAxiosParamCreator(configuration).apiModelArtifactsList(page, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this model artifact.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiModelArtifactsRetrieve(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelArtifact>> {
            const localVarAxiosArgs = await MlOpsApiAxiosParamCreator(configuration).apiModelArtifactsRetrieve(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {DeviceCalibrationRequest} deviceCalibrationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deviceCalibrationUpdateOrCreate(deviceCalibrationRequest: DeviceCalibrationRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceCalibration>> {
            const localVarAxiosArgs = await MlOpsApiAxiosParamCreator(configuration).deviceCalibrationUpdateOrCreate(deviceCalibrationRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * MlOpsApi - factory interface
 * @export
 */
export const MlOpsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDeviceCalibrationsList(page?: number, options?: any): AxiosPromise<PaginatedDeviceCalibrationList> {
            return MlOpsApiFp(configuration).apiDeviceCalibrationsList(page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this device calibration.
         * @param {PatchedDeviceCalibrationRequest} [patchedDeviceCalibrationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDeviceCalibrationsPartialUpdate(id: number, patchedDeviceCalibrationRequest?: PatchedDeviceCalibrationRequest, options?: any): AxiosPromise<DeviceCalibration> {
            return MlOpsApiFp(configuration).apiDeviceCalibrationsPartialUpdate(id, patchedDeviceCalibrationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this device calibration.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDeviceCalibrationsRetrieve(id: number, options?: any): AxiosPromise<DeviceCalibration> {
            return MlOpsApiFp(configuration).apiDeviceCalibrationsRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this device calibration.
         * @param {DeviceCalibrationRequest} deviceCalibrationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDeviceCalibrationsUpdate(id: number, deviceCalibrationRequest: DeviceCalibrationRequest, options?: any): AxiosPromise<DeviceCalibration> {
            return MlOpsApiFp(configuration).apiDeviceCalibrationsUpdate(id, deviceCalibrationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiExperimentDeviceConfigsList(page?: number, options?: any): AxiosPromise<PaginatedExperimentDeviceConfigList> {
            return MlOpsApiFp(configuration).apiExperimentDeviceConfigsList(page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this experiment device config.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiExperimentDeviceConfigsRetrieve(id: number, options?: any): AxiosPromise<ExperimentDeviceConfig> {
            return MlOpsApiFp(configuration).apiExperimentDeviceConfigsRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiExperimentsList(page?: number, options?: any): AxiosPromise<PaginatedExperimentList> {
            return MlOpsApiFp(configuration).apiExperimentsList(page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this experiment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiExperimentsRetrieve(id: number, options?: any): AxiosPromise<Experiment> {
            return MlOpsApiFp(configuration).apiExperimentsRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiModelArtifactsList(page?: number, options?: any): AxiosPromise<PaginatedModelArtifactList> {
            return MlOpsApiFp(configuration).apiModelArtifactsList(page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this model artifact.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiModelArtifactsRetrieve(id: number, options?: any): AxiosPromise<ModelArtifact> {
            return MlOpsApiFp(configuration).apiModelArtifactsRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DeviceCalibrationRequest} deviceCalibrationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceCalibrationUpdateOrCreate(deviceCalibrationRequest: DeviceCalibrationRequest, options?: any): AxiosPromise<DeviceCalibration> {
            return MlOpsApiFp(configuration).deviceCalibrationUpdateOrCreate(deviceCalibrationRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MlOpsApi - interface
 * @export
 * @interface MlOpsApi
 */
export interface MlOpsApiInterface {
    /**
     * 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlOpsApiInterface
     */
    apiDeviceCalibrationsList(page?: number, options?: any): AxiosPromise<PaginatedDeviceCalibrationList>;

    /**
     * 
     * @param {number} id A unique integer value identifying this device calibration.
     * @param {PatchedDeviceCalibrationRequest} [patchedDeviceCalibrationRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlOpsApiInterface
     */
    apiDeviceCalibrationsPartialUpdate(id: number, patchedDeviceCalibrationRequest?: PatchedDeviceCalibrationRequest, options?: any): AxiosPromise<DeviceCalibration>;

    /**
     * 
     * @param {number} id A unique integer value identifying this device calibration.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlOpsApiInterface
     */
    apiDeviceCalibrationsRetrieve(id: number, options?: any): AxiosPromise<DeviceCalibration>;

    /**
     * 
     * @param {number} id A unique integer value identifying this device calibration.
     * @param {DeviceCalibrationRequest} deviceCalibrationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlOpsApiInterface
     */
    apiDeviceCalibrationsUpdate(id: number, deviceCalibrationRequest: DeviceCalibrationRequest, options?: any): AxiosPromise<DeviceCalibration>;

    /**
     * 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlOpsApiInterface
     */
    apiExperimentDeviceConfigsList(page?: number, options?: any): AxiosPromise<PaginatedExperimentDeviceConfigList>;

    /**
     * 
     * @param {number} id A unique integer value identifying this experiment device config.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlOpsApiInterface
     */
    apiExperimentDeviceConfigsRetrieve(id: number, options?: any): AxiosPromise<ExperimentDeviceConfig>;

    /**
     * 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlOpsApiInterface
     */
    apiExperimentsList(page?: number, options?: any): AxiosPromise<PaginatedExperimentList>;

    /**
     * 
     * @param {number} id A unique integer value identifying this experiment.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlOpsApiInterface
     */
    apiExperimentsRetrieve(id: number, options?: any): AxiosPromise<Experiment>;

    /**
     * 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlOpsApiInterface
     */
    apiModelArtifactsList(page?: number, options?: any): AxiosPromise<PaginatedModelArtifactList>;

    /**
     * 
     * @param {number} id A unique integer value identifying this model artifact.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlOpsApiInterface
     */
    apiModelArtifactsRetrieve(id: number, options?: any): AxiosPromise<ModelArtifact>;

    /**
     * 
     * @param {DeviceCalibrationRequest} deviceCalibrationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlOpsApiInterface
     */
    deviceCalibrationUpdateOrCreate(deviceCalibrationRequest: DeviceCalibrationRequest, options?: any): AxiosPromise<DeviceCalibration>;

}

/**
 * MlOpsApi - object-oriented interface
 * @export
 * @class MlOpsApi
 * @extends {BaseAPI}
 */
export class MlOpsApi extends BaseAPI implements MlOpsApiInterface {
    /**
     * 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlOpsApi
     */
    public apiDeviceCalibrationsList(page?: number, options?: any) {
        return MlOpsApiFp(this.configuration).apiDeviceCalibrationsList(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this device calibration.
     * @param {PatchedDeviceCalibrationRequest} [patchedDeviceCalibrationRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlOpsApi
     */
    public apiDeviceCalibrationsPartialUpdate(id: number, patchedDeviceCalibrationRequest?: PatchedDeviceCalibrationRequest, options?: any) {
        return MlOpsApiFp(this.configuration).apiDeviceCalibrationsPartialUpdate(id, patchedDeviceCalibrationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this device calibration.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlOpsApi
     */
    public apiDeviceCalibrationsRetrieve(id: number, options?: any) {
        return MlOpsApiFp(this.configuration).apiDeviceCalibrationsRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this device calibration.
     * @param {DeviceCalibrationRequest} deviceCalibrationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlOpsApi
     */
    public apiDeviceCalibrationsUpdate(id: number, deviceCalibrationRequest: DeviceCalibrationRequest, options?: any) {
        return MlOpsApiFp(this.configuration).apiDeviceCalibrationsUpdate(id, deviceCalibrationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlOpsApi
     */
    public apiExperimentDeviceConfigsList(page?: number, options?: any) {
        return MlOpsApiFp(this.configuration).apiExperimentDeviceConfigsList(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this experiment device config.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlOpsApi
     */
    public apiExperimentDeviceConfigsRetrieve(id: number, options?: any) {
        return MlOpsApiFp(this.configuration).apiExperimentDeviceConfigsRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlOpsApi
     */
    public apiExperimentsList(page?: number, options?: any) {
        return MlOpsApiFp(this.configuration).apiExperimentsList(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this experiment.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlOpsApi
     */
    public apiExperimentsRetrieve(id: number, options?: any) {
        return MlOpsApiFp(this.configuration).apiExperimentsRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlOpsApi
     */
    public apiModelArtifactsList(page?: number, options?: any) {
        return MlOpsApiFp(this.configuration).apiModelArtifactsList(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this model artifact.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlOpsApi
     */
    public apiModelArtifactsRetrieve(id: number, options?: any) {
        return MlOpsApiFp(this.configuration).apiModelArtifactsRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DeviceCalibrationRequest} deviceCalibrationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MlOpsApi
     */
    public deviceCalibrationUpdateOrCreate(deviceCalibrationRequest: DeviceCalibrationRequest, options?: any) {
        return MlOpsApiFp(this.configuration).deviceCalibrationUpdateOrCreate(deviceCalibrationRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RemoteControlApi - axios parameter creator
 * @export
 */
export const RemoteControlApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCommandsList: async (page?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/commands/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this remote control command.
         * @param {PatchedRemoteControlCommandRequest} [patchedRemoteControlCommandRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCommandsPartialUpdate: async (id: number, patchedRemoteControlCommandRequest?: PatchedRemoteControlCommandRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiCommandsPartialUpdate.');
            }
            const localVarPath = `/api/commands/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof patchedRemoteControlCommandRequest !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(patchedRemoteControlCommandRequest !== undefined ? patchedRemoteControlCommandRequest : {})
                : (patchedRemoteControlCommandRequest || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this remote control command.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCommandsRetrieve: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiCommandsRetrieve.');
            }
            const localVarPath = `/api/commands/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this remote control command.
         * @param {RemoteControlCommandRequest} remoteControlCommandRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCommandsUpdate: async (id: number, remoteControlCommandRequest: RemoteControlCommandRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiCommandsUpdate.');
            }
            // verify required parameter 'remoteControlCommandRequest' is not null or undefined
            if (remoteControlCommandRequest === null || remoteControlCommandRequest === undefined) {
                throw new RequiredError('remoteControlCommandRequest','Required parameter remoteControlCommandRequest was null or undefined when calling apiCommandsUpdate.');
            }
            const localVarPath = `/api/commands/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof remoteControlCommandRequest !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(remoteControlCommandRequest !== undefined ? remoteControlCommandRequest : {})
                : (remoteControlCommandRequest || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGcodeFilesList: async (page?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/gcode-files/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [name] 
         * @param {any} [file] 
         * @param {string} [fileHash] 
         * @param {string} [octoprintDevice] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGcodeFilesPartialUpdate: async (id: string, name?: string, file?: any, fileHash?: string, octoprintDevice?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiGcodeFilesPartialUpdate.');
            }
            const localVarPath = `/api/gcode-files/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


            if (name !== undefined) { 
                localVarFormParams.append('name', name as any);
            }
    
            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
            if (fileHash !== undefined) { 
                localVarFormParams.append('file_hash', fileHash as any);
            }
    
            if (octoprintDevice !== undefined) { 
                localVarFormParams.append('octoprint_device', octoprintDevice as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGcodeFilesRetrieve: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiGcodeFilesRetrieve.');
            }
            const localVarPath = `/api/gcode-files/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} name 
         * @param {any} file 
         * @param {string} fileHash 
         * @param {string} octoprintDevice 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGcodeFilesUpdate: async (id: string, name: string, file: any, fileHash: string, octoprintDevice: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiGcodeFilesUpdate.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling apiGcodeFilesUpdate.');
            }
            // verify required parameter 'file' is not null or undefined
            if (file === null || file === undefined) {
                throw new RequiredError('file','Required parameter file was null or undefined when calling apiGcodeFilesUpdate.');
            }
            // verify required parameter 'fileHash' is not null or undefined
            if (fileHash === null || fileHash === undefined) {
                throw new RequiredError('fileHash','Required parameter fileHash was null or undefined when calling apiGcodeFilesUpdate.');
            }
            // verify required parameter 'octoprintDevice' is not null or undefined
            if (octoprintDevice === null || octoprintDevice === undefined) {
                throw new RequiredError('octoprintDevice','Required parameter octoprintDevice was null or undefined when calling apiGcodeFilesUpdate.');
            }
            const localVarPath = `/api/gcode-files/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


            if (name !== undefined) { 
                localVarFormParams.append('name', name as any);
            }
    
            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
            if (fileHash !== undefined) { 
                localVarFormParams.append('file_hash', fileHash as any);
            }
    
            if (octoprintDevice !== undefined) { 
                localVarFormParams.append('octoprint_device', octoprintDevice as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {OctoPrintDeviceRequest} octoPrintDeviceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOctoprintDevicesCreate: async (octoPrintDeviceRequest: OctoPrintDeviceRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'octoPrintDeviceRequest' is not null or undefined
            if (octoPrintDeviceRequest === null || octoPrintDeviceRequest === undefined) {
                throw new RequiredError('octoPrintDeviceRequest','Required parameter octoPrintDeviceRequest was null or undefined when calling apiOctoprintDevicesCreate.');
            }
            const localVarPath = `/api/octoprint-devices/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof octoPrintDeviceRequest !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(octoPrintDeviceRequest !== undefined ? octoPrintDeviceRequest : {})
                : (octoPrintDeviceRequest || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOctoprintDevicesList: async (page?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/octoprint-devices/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this octo print device.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOctoprintDevicesRetrieve: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiOctoprintDevicesRetrieve.');
            }
            const localVarPath = `/api/octoprint-devices/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PrintSessionRequest} printSessionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPrintSessionsCreate: async (printSessionRequest: PrintSessionRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'printSessionRequest' is not null or undefined
            if (printSessionRequest === null || printSessionRequest === undefined) {
                throw new RequiredError('printSessionRequest','Required parameter printSessionRequest was null or undefined when calling apiPrintSessionsCreate.');
            }
            const localVarPath = `/api/print-sessions/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof printSessionRequest !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(printSessionRequest !== undefined ? printSessionRequest : {})
                : (printSessionRequest || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPrintSessionsList: async (page?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/print-sessions/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} session 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPrintSessionsRetrieve: async (session: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'session' is not null or undefined
            if (session === null || session === undefined) {
                throw new RequiredError('session','Required parameter session was null or undefined when calling apiPrintSessionsRetrieve.');
            }
            const localVarPath = `/api/print-sessions/{session}/`
                .replace(`{${"session"}}`, encodeURIComponent(String(session)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [name] 
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [user] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPrinterProfilesList: async (name?: string, page?: number, user?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/printer-profiles/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (user !== undefined) {
                localVarQueryParameter['user'] = user;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this printer profile.
         * @param {PatchedPrinterProfileRequest} [patchedPrinterProfileRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPrinterProfilesPartialUpdate: async (id: number, patchedPrinterProfileRequest?: PatchedPrinterProfileRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiPrinterProfilesPartialUpdate.');
            }
            const localVarPath = `/api/printer-profiles/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof patchedPrinterProfileRequest !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(patchedPrinterProfileRequest !== undefined ? patchedPrinterProfileRequest : {})
                : (patchedPrinterProfileRequest || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this printer profile.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPrinterProfilesRetrieve: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiPrinterProfilesRetrieve.');
            }
            const localVarPath = `/api/printer-profiles/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this printer profile.
         * @param {PrinterProfileRequest} printerProfileRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPrinterProfilesUpdate: async (id: number, printerProfileRequest: PrinterProfileRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiPrinterProfilesUpdate.');
            }
            // verify required parameter 'printerProfileRequest' is not null or undefined
            if (printerProfileRequest === null || printerProfileRequest === undefined) {
                throw new RequiredError('printerProfileRequest','Required parameter printerProfileRequest was null or undefined when calling apiPrinterProfilesUpdate.');
            }
            const localVarPath = `/api/printer-profiles/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof printerProfileRequest !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(printerProfileRequest !== undefined ? printerProfileRequest : {})
                : (printerProfileRequest || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} name 
         * @param {any} file 
         * @param {string} fileHash 
         * @param {string} octoprintDevice 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gcodeFilesCreate: async (name: string, file: any, fileHash: string, octoprintDevice: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling gcodeFilesCreate.');
            }
            // verify required parameter 'file' is not null or undefined
            if (file === null || file === undefined) {
                throw new RequiredError('file','Required parameter file was null or undefined when calling gcodeFilesCreate.');
            }
            // verify required parameter 'fileHash' is not null or undefined
            if (fileHash === null || fileHash === undefined) {
                throw new RequiredError('fileHash','Required parameter fileHash was null or undefined when calling gcodeFilesCreate.');
            }
            // verify required parameter 'octoprintDevice' is not null or undefined
            if (octoprintDevice === null || octoprintDevice === undefined) {
                throw new RequiredError('octoprintDevice','Required parameter octoprintDevice was null or undefined when calling gcodeFilesCreate.');
            }
            const localVarPath = `/api/gcode-files/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


            if (name !== undefined) { 
                localVarFormParams.append('name', name as any);
            }
    
            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
            if (fileHash !== undefined) { 
                localVarFormParams.append('file_hash', fileHash as any);
            }
    
            if (octoprintDevice !== undefined) { 
                localVarFormParams.append('octoprint_device', octoprintDevice as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} name 
         * @param {any} file 
         * @param {string} fileHash 
         * @param {string} octoprintDevice 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gcodeFilesUpdateOrCreate: async (name: string, file: any, fileHash: string, octoprintDevice: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling gcodeFilesUpdateOrCreate.');
            }
            // verify required parameter 'file' is not null or undefined
            if (file === null || file === undefined) {
                throw new RequiredError('file','Required parameter file was null or undefined when calling gcodeFilesUpdateOrCreate.');
            }
            // verify required parameter 'fileHash' is not null or undefined
            if (fileHash === null || fileHash === undefined) {
                throw new RequiredError('fileHash','Required parameter fileHash was null or undefined when calling gcodeFilesUpdateOrCreate.');
            }
            // verify required parameter 'octoprintDevice' is not null or undefined
            if (octoprintDevice === null || octoprintDevice === undefined) {
                throw new RequiredError('octoprintDevice','Required parameter octoprintDevice was null or undefined when calling gcodeFilesUpdateOrCreate.');
            }
            const localVarPath = `/api/gcode-files/update-or-create/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


            if (name !== undefined) { 
                localVarFormParams.append('name', name as any);
            }
    
            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
            if (fileHash !== undefined) { 
                localVarFormParams.append('file_hash', fileHash as any);
            }
    
            if (octoprintDevice !== undefined) { 
                localVarFormParams.append('octoprint_device', octoprintDevice as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this octo print device.
         * @param {PatchedOctoPrintDeviceRequest} [patchedOctoPrintDeviceRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintDevicesPartialUpdate: async (id: number, patchedOctoPrintDeviceRequest?: PatchedOctoPrintDeviceRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling octoprintDevicesPartialUpdate.');
            }
            const localVarPath = `/api/octoprint-devices/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof patchedOctoPrintDeviceRequest !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(patchedOctoPrintDeviceRequest !== undefined ? patchedOctoPrintDeviceRequest : {})
                : (patchedOctoPrintDeviceRequest || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this octo print device.
         * @param {OctoPrintDeviceRequest} octoPrintDeviceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintDevicesUpdate: async (id: number, octoPrintDeviceRequest: OctoPrintDeviceRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling octoprintDevicesUpdate.');
            }
            // verify required parameter 'octoPrintDeviceRequest' is not null or undefined
            if (octoPrintDeviceRequest === null || octoPrintDeviceRequest === undefined) {
                throw new RequiredError('octoPrintDeviceRequest','Required parameter octoPrintDeviceRequest was null or undefined when calling octoprintDevicesUpdate.');
            }
            const localVarPath = `/api/octoprint-devices/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof octoPrintDeviceRequest !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(octoPrintDeviceRequest !== undefined ? octoPrintDeviceRequest : {})
                : (octoPrintDeviceRequest || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {OctoPrintDeviceRequest} octoPrintDeviceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintDevicesUpdateOrCreate: async (octoPrintDeviceRequest: OctoPrintDeviceRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'octoPrintDeviceRequest' is not null or undefined
            if (octoPrintDeviceRequest === null || octoPrintDeviceRequest === undefined) {
                throw new RequiredError('octoPrintDeviceRequest','Required parameter octoPrintDeviceRequest was null or undefined when calling octoprintDevicesUpdateOrCreate.');
            }
            const localVarPath = `/api/octoprint-devices/update-or-create/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof octoPrintDeviceRequest !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(octoPrintDeviceRequest !== undefined ? octoPrintDeviceRequest : {})
                : (octoPrintDeviceRequest || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} session 
         * @param {PatchedPrintSessionRequest} [patchedPrintSessionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        printSessionPartialUpdate: async (session: string, patchedPrintSessionRequest?: PatchedPrintSessionRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'session' is not null or undefined
            if (session === null || session === undefined) {
                throw new RequiredError('session','Required parameter session was null or undefined when calling printSessionPartialUpdate.');
            }
            const localVarPath = `/api/print-sessions/{session}/`
                .replace(`{${"session"}}`, encodeURIComponent(String(session)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof patchedPrintSessionRequest !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(patchedPrintSessionRequest !== undefined ? patchedPrintSessionRequest : {})
                : (patchedPrintSessionRequest || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} session 
         * @param {PrintSessionRequest} printSessionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        printSessionUpdate: async (session: string, printSessionRequest: PrintSessionRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'session' is not null or undefined
            if (session === null || session === undefined) {
                throw new RequiredError('session','Required parameter session was null or undefined when calling printSessionUpdate.');
            }
            // verify required parameter 'printSessionRequest' is not null or undefined
            if (printSessionRequest === null || printSessionRequest === undefined) {
                throw new RequiredError('printSessionRequest','Required parameter printSessionRequest was null or undefined when calling printSessionUpdate.');
            }
            const localVarPath = `/api/print-sessions/{session}/`
                .replace(`{${"session"}}`, encodeURIComponent(String(session)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof printSessionRequest !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(printSessionRequest !== undefined ? printSessionRequest : {})
                : (printSessionRequest || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PrinterProfileRequest} printerProfileRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        printerProfilesCreate: async (printerProfileRequest: PrinterProfileRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'printerProfileRequest' is not null or undefined
            if (printerProfileRequest === null || printerProfileRequest === undefined) {
                throw new RequiredError('printerProfileRequest','Required parameter printerProfileRequest was null or undefined when calling printerProfilesCreate.');
            }
            const localVarPath = `/api/printer-profiles/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof printerProfileRequest !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(printerProfileRequest !== undefined ? printerProfileRequest : {})
                : (printerProfileRequest || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PrinterProfileRequest} printerProfileRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        printerProfilesUpdateOrCreate: async (printerProfileRequest: PrinterProfileRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'printerProfileRequest' is not null or undefined
            if (printerProfileRequest === null || printerProfileRequest === undefined) {
                throw new RequiredError('printerProfileRequest','Required parameter printerProfileRequest was null or undefined when calling printerProfilesUpdateOrCreate.');
            }
            const localVarPath = `/api/printer-profiles/update-or-create/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof printerProfileRequest !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(printerProfileRequest !== undefined ? printerProfileRequest : {})
                : (printerProfileRequest || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validCommandsRetrieve: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/commands/valid/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RemoteControlApi - functional programming interface
 * @export
 */
export const RemoteControlApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCommandsList(page?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedRemoteControlCommandList>> {
            const localVarAxiosArgs = await RemoteControlApiAxiosParamCreator(configuration).apiCommandsList(page, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this remote control command.
         * @param {PatchedRemoteControlCommandRequest} [patchedRemoteControlCommandRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCommandsPartialUpdate(id: number, patchedRemoteControlCommandRequest?: PatchedRemoteControlCommandRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RemoteControlCommand>> {
            const localVarAxiosArgs = await RemoteControlApiAxiosParamCreator(configuration).apiCommandsPartialUpdate(id, patchedRemoteControlCommandRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this remote control command.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCommandsRetrieve(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RemoteControlCommand>> {
            const localVarAxiosArgs = await RemoteControlApiAxiosParamCreator(configuration).apiCommandsRetrieve(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this remote control command.
         * @param {RemoteControlCommandRequest} remoteControlCommandRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCommandsUpdate(id: number, remoteControlCommandRequest: RemoteControlCommandRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RemoteControlCommand>> {
            const localVarAxiosArgs = await RemoteControlApiAxiosParamCreator(configuration).apiCommandsUpdate(id, remoteControlCommandRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGcodeFilesList(page?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedGcodeFileList>> {
            const localVarAxiosArgs = await RemoteControlApiAxiosParamCreator(configuration).apiGcodeFilesList(page, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [name] 
         * @param {any} [file] 
         * @param {string} [fileHash] 
         * @param {string} [octoprintDevice] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGcodeFilesPartialUpdate(id: string, name?: string, file?: any, fileHash?: string, octoprintDevice?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GcodeFile>> {
            const localVarAxiosArgs = await RemoteControlApiAxiosParamCreator(configuration).apiGcodeFilesPartialUpdate(id, name, file, fileHash, octoprintDevice, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGcodeFilesRetrieve(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GcodeFile>> {
            const localVarAxiosArgs = await RemoteControlApiAxiosParamCreator(configuration).apiGcodeFilesRetrieve(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} name 
         * @param {any} file 
         * @param {string} fileHash 
         * @param {string} octoprintDevice 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGcodeFilesUpdate(id: string, name: string, file: any, fileHash: string, octoprintDevice: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GcodeFile>> {
            const localVarAxiosArgs = await RemoteControlApiAxiosParamCreator(configuration).apiGcodeFilesUpdate(id, name, file, fileHash, octoprintDevice, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {OctoPrintDeviceRequest} octoPrintDeviceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOctoprintDevicesCreate(octoPrintDeviceRequest: OctoPrintDeviceRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OctoPrintDevice>> {
            const localVarAxiosArgs = await RemoteControlApiAxiosParamCreator(configuration).apiOctoprintDevicesCreate(octoPrintDeviceRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOctoprintDevicesList(page?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedOctoPrintDeviceList>> {
            const localVarAxiosArgs = await RemoteControlApiAxiosParamCreator(configuration).apiOctoprintDevicesList(page, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this octo print device.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOctoprintDevicesRetrieve(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OctoPrintDevice>> {
            const localVarAxiosArgs = await RemoteControlApiAxiosParamCreator(configuration).apiOctoprintDevicesRetrieve(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {PrintSessionRequest} printSessionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPrintSessionsCreate(printSessionRequest: PrintSessionRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PrintSession>> {
            const localVarAxiosArgs = await RemoteControlApiAxiosParamCreator(configuration).apiPrintSessionsCreate(printSessionRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPrintSessionsList(page?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedPrintSessionList>> {
            const localVarAxiosArgs = await RemoteControlApiAxiosParamCreator(configuration).apiPrintSessionsList(page, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} session 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPrintSessionsRetrieve(session: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PrintSession>> {
            const localVarAxiosArgs = await RemoteControlApiAxiosParamCreator(configuration).apiPrintSessionsRetrieve(session, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [name] 
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [user] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPrinterProfilesList(name?: string, page?: number, user?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedPrinterProfileList>> {
            const localVarAxiosArgs = await RemoteControlApiAxiosParamCreator(configuration).apiPrinterProfilesList(name, page, user, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this printer profile.
         * @param {PatchedPrinterProfileRequest} [patchedPrinterProfileRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPrinterProfilesPartialUpdate(id: number, patchedPrinterProfileRequest?: PatchedPrinterProfileRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PrinterProfile>> {
            const localVarAxiosArgs = await RemoteControlApiAxiosParamCreator(configuration).apiPrinterProfilesPartialUpdate(id, patchedPrinterProfileRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this printer profile.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPrinterProfilesRetrieve(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PrinterProfile>> {
            const localVarAxiosArgs = await RemoteControlApiAxiosParamCreator(configuration).apiPrinterProfilesRetrieve(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this printer profile.
         * @param {PrinterProfileRequest} printerProfileRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPrinterProfilesUpdate(id: number, printerProfileRequest: PrinterProfileRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PrinterProfile>> {
            const localVarAxiosArgs = await RemoteControlApiAxiosParamCreator(configuration).apiPrinterProfilesUpdate(id, printerProfileRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} name 
         * @param {any} file 
         * @param {string} fileHash 
         * @param {string} octoprintDevice 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gcodeFilesCreate(name: string, file: any, fileHash: string, octoprintDevice: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GcodeFile>> {
            const localVarAxiosArgs = await RemoteControlApiAxiosParamCreator(configuration).gcodeFilesCreate(name, file, fileHash, octoprintDevice, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} name 
         * @param {any} file 
         * @param {string} fileHash 
         * @param {string} octoprintDevice 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gcodeFilesUpdateOrCreate(name: string, file: any, fileHash: string, octoprintDevice: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GcodeFile>> {
            const localVarAxiosArgs = await RemoteControlApiAxiosParamCreator(configuration).gcodeFilesUpdateOrCreate(name, file, fileHash, octoprintDevice, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this octo print device.
         * @param {PatchedOctoPrintDeviceRequest} [patchedOctoPrintDeviceRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async octoprintDevicesPartialUpdate(id: number, patchedOctoPrintDeviceRequest?: PatchedOctoPrintDeviceRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OctoPrintDevice>> {
            const localVarAxiosArgs = await RemoteControlApiAxiosParamCreator(configuration).octoprintDevicesPartialUpdate(id, patchedOctoPrintDeviceRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this octo print device.
         * @param {OctoPrintDeviceRequest} octoPrintDeviceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async octoprintDevicesUpdate(id: number, octoPrintDeviceRequest: OctoPrintDeviceRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OctoPrintDevice>> {
            const localVarAxiosArgs = await RemoteControlApiAxiosParamCreator(configuration).octoprintDevicesUpdate(id, octoPrintDeviceRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {OctoPrintDeviceRequest} octoPrintDeviceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async octoprintDevicesUpdateOrCreate(octoPrintDeviceRequest: OctoPrintDeviceRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OctoPrintDevice>> {
            const localVarAxiosArgs = await RemoteControlApiAxiosParamCreator(configuration).octoprintDevicesUpdateOrCreate(octoPrintDeviceRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} session 
         * @param {PatchedPrintSessionRequest} [patchedPrintSessionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async printSessionPartialUpdate(session: string, patchedPrintSessionRequest?: PatchedPrintSessionRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PrintSession>> {
            const localVarAxiosArgs = await RemoteControlApiAxiosParamCreator(configuration).printSessionPartialUpdate(session, patchedPrintSessionRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} session 
         * @param {PrintSessionRequest} printSessionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async printSessionUpdate(session: string, printSessionRequest: PrintSessionRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PrintSession>> {
            const localVarAxiosArgs = await RemoteControlApiAxiosParamCreator(configuration).printSessionUpdate(session, printSessionRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {PrinterProfileRequest} printerProfileRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async printerProfilesCreate(printerProfileRequest: PrinterProfileRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PrintSession>> {
            const localVarAxiosArgs = await RemoteControlApiAxiosParamCreator(configuration).printerProfilesCreate(printerProfileRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {PrinterProfileRequest} printerProfileRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async printerProfilesUpdateOrCreate(printerProfileRequest: PrinterProfileRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PrinterProfile>> {
            const localVarAxiosArgs = await RemoteControlApiAxiosParamCreator(configuration).printerProfilesUpdateOrCreate(printerProfileRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validCommandsRetrieve(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await RemoteControlApiAxiosParamCreator(configuration).validCommandsRetrieve(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * RemoteControlApi - factory interface
 * @export
 */
export const RemoteControlApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCommandsList(page?: number, options?: any): AxiosPromise<PaginatedRemoteControlCommandList> {
            return RemoteControlApiFp(configuration).apiCommandsList(page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this remote control command.
         * @param {PatchedRemoteControlCommandRequest} [patchedRemoteControlCommandRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCommandsPartialUpdate(id: number, patchedRemoteControlCommandRequest?: PatchedRemoteControlCommandRequest, options?: any): AxiosPromise<RemoteControlCommand> {
            return RemoteControlApiFp(configuration).apiCommandsPartialUpdate(id, patchedRemoteControlCommandRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this remote control command.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCommandsRetrieve(id: number, options?: any): AxiosPromise<RemoteControlCommand> {
            return RemoteControlApiFp(configuration).apiCommandsRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this remote control command.
         * @param {RemoteControlCommandRequest} remoteControlCommandRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCommandsUpdate(id: number, remoteControlCommandRequest: RemoteControlCommandRequest, options?: any): AxiosPromise<RemoteControlCommand> {
            return RemoteControlApiFp(configuration).apiCommandsUpdate(id, remoteControlCommandRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGcodeFilesList(page?: number, options?: any): AxiosPromise<PaginatedGcodeFileList> {
            return RemoteControlApiFp(configuration).apiGcodeFilesList(page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [name] 
         * @param {any} [file] 
         * @param {string} [fileHash] 
         * @param {string} [octoprintDevice] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGcodeFilesPartialUpdate(id: string, name?: string, file?: any, fileHash?: string, octoprintDevice?: string, options?: any): AxiosPromise<GcodeFile> {
            return RemoteControlApiFp(configuration).apiGcodeFilesPartialUpdate(id, name, file, fileHash, octoprintDevice, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGcodeFilesRetrieve(id: string, options?: any): AxiosPromise<GcodeFile> {
            return RemoteControlApiFp(configuration).apiGcodeFilesRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {string} name 
         * @param {any} file 
         * @param {string} fileHash 
         * @param {string} octoprintDevice 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGcodeFilesUpdate(id: string, name: string, file: any, fileHash: string, octoprintDevice: string, options?: any): AxiosPromise<GcodeFile> {
            return RemoteControlApiFp(configuration).apiGcodeFilesUpdate(id, name, file, fileHash, octoprintDevice, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OctoPrintDeviceRequest} octoPrintDeviceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOctoprintDevicesCreate(octoPrintDeviceRequest: OctoPrintDeviceRequest, options?: any): AxiosPromise<OctoPrintDevice> {
            return RemoteControlApiFp(configuration).apiOctoprintDevicesCreate(octoPrintDeviceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOctoprintDevicesList(page?: number, options?: any): AxiosPromise<PaginatedOctoPrintDeviceList> {
            return RemoteControlApiFp(configuration).apiOctoprintDevicesList(page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this octo print device.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOctoprintDevicesRetrieve(id: number, options?: any): AxiosPromise<OctoPrintDevice> {
            return RemoteControlApiFp(configuration).apiOctoprintDevicesRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PrintSessionRequest} printSessionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPrintSessionsCreate(printSessionRequest: PrintSessionRequest, options?: any): AxiosPromise<PrintSession> {
            return RemoteControlApiFp(configuration).apiPrintSessionsCreate(printSessionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPrintSessionsList(page?: number, options?: any): AxiosPromise<PaginatedPrintSessionList> {
            return RemoteControlApiFp(configuration).apiPrintSessionsList(page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} session 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPrintSessionsRetrieve(session: string, options?: any): AxiosPromise<PrintSession> {
            return RemoteControlApiFp(configuration).apiPrintSessionsRetrieve(session, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [name] 
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [user] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPrinterProfilesList(name?: string, page?: number, user?: number, options?: any): AxiosPromise<PaginatedPrinterProfileList> {
            return RemoteControlApiFp(configuration).apiPrinterProfilesList(name, page, user, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this printer profile.
         * @param {PatchedPrinterProfileRequest} [patchedPrinterProfileRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPrinterProfilesPartialUpdate(id: number, patchedPrinterProfileRequest?: PatchedPrinterProfileRequest, options?: any): AxiosPromise<PrinterProfile> {
            return RemoteControlApiFp(configuration).apiPrinterProfilesPartialUpdate(id, patchedPrinterProfileRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this printer profile.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPrinterProfilesRetrieve(id: number, options?: any): AxiosPromise<PrinterProfile> {
            return RemoteControlApiFp(configuration).apiPrinterProfilesRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this printer profile.
         * @param {PrinterProfileRequest} printerProfileRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPrinterProfilesUpdate(id: number, printerProfileRequest: PrinterProfileRequest, options?: any): AxiosPromise<PrinterProfile> {
            return RemoteControlApiFp(configuration).apiPrinterProfilesUpdate(id, printerProfileRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} name 
         * @param {any} file 
         * @param {string} fileHash 
         * @param {string} octoprintDevice 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gcodeFilesCreate(name: string, file: any, fileHash: string, octoprintDevice: string, options?: any): AxiosPromise<GcodeFile> {
            return RemoteControlApiFp(configuration).gcodeFilesCreate(name, file, fileHash, octoprintDevice, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} name 
         * @param {any} file 
         * @param {string} fileHash 
         * @param {string} octoprintDevice 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gcodeFilesUpdateOrCreate(name: string, file: any, fileHash: string, octoprintDevice: string, options?: any): AxiosPromise<GcodeFile> {
            return RemoteControlApiFp(configuration).gcodeFilesUpdateOrCreate(name, file, fileHash, octoprintDevice, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this octo print device.
         * @param {PatchedOctoPrintDeviceRequest} [patchedOctoPrintDeviceRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintDevicesPartialUpdate(id: number, patchedOctoPrintDeviceRequest?: PatchedOctoPrintDeviceRequest, options?: any): AxiosPromise<OctoPrintDevice> {
            return RemoteControlApiFp(configuration).octoprintDevicesPartialUpdate(id, patchedOctoPrintDeviceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this octo print device.
         * @param {OctoPrintDeviceRequest} octoPrintDeviceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintDevicesUpdate(id: number, octoPrintDeviceRequest: OctoPrintDeviceRequest, options?: any): AxiosPromise<OctoPrintDevice> {
            return RemoteControlApiFp(configuration).octoprintDevicesUpdate(id, octoPrintDeviceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OctoPrintDeviceRequest} octoPrintDeviceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintDevicesUpdateOrCreate(octoPrintDeviceRequest: OctoPrintDeviceRequest, options?: any): AxiosPromise<OctoPrintDevice> {
            return RemoteControlApiFp(configuration).octoprintDevicesUpdateOrCreate(octoPrintDeviceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} session 
         * @param {PatchedPrintSessionRequest} [patchedPrintSessionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        printSessionPartialUpdate(session: string, patchedPrintSessionRequest?: PatchedPrintSessionRequest, options?: any): AxiosPromise<PrintSession> {
            return RemoteControlApiFp(configuration).printSessionPartialUpdate(session, patchedPrintSessionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} session 
         * @param {PrintSessionRequest} printSessionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        printSessionUpdate(session: string, printSessionRequest: PrintSessionRequest, options?: any): AxiosPromise<PrintSession> {
            return RemoteControlApiFp(configuration).printSessionUpdate(session, printSessionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PrinterProfileRequest} printerProfileRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        printerProfilesCreate(printerProfileRequest: PrinterProfileRequest, options?: any): AxiosPromise<PrintSession> {
            return RemoteControlApiFp(configuration).printerProfilesCreate(printerProfileRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PrinterProfileRequest} printerProfileRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        printerProfilesUpdateOrCreate(printerProfileRequest: PrinterProfileRequest, options?: any): AxiosPromise<PrinterProfile> {
            return RemoteControlApiFp(configuration).printerProfilesUpdateOrCreate(printerProfileRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validCommandsRetrieve(options?: any): AxiosPromise<string> {
            return RemoteControlApiFp(configuration).validCommandsRetrieve(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RemoteControlApi - interface
 * @export
 * @interface RemoteControlApi
 */
export interface RemoteControlApiInterface {
    /**
     * 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemoteControlApiInterface
     */
    apiCommandsList(page?: number, options?: any): AxiosPromise<PaginatedRemoteControlCommandList>;

    /**
     * 
     * @param {number} id A unique integer value identifying this remote control command.
     * @param {PatchedRemoteControlCommandRequest} [patchedRemoteControlCommandRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemoteControlApiInterface
     */
    apiCommandsPartialUpdate(id: number, patchedRemoteControlCommandRequest?: PatchedRemoteControlCommandRequest, options?: any): AxiosPromise<RemoteControlCommand>;

    /**
     * 
     * @param {number} id A unique integer value identifying this remote control command.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemoteControlApiInterface
     */
    apiCommandsRetrieve(id: number, options?: any): AxiosPromise<RemoteControlCommand>;

    /**
     * 
     * @param {number} id A unique integer value identifying this remote control command.
     * @param {RemoteControlCommandRequest} remoteControlCommandRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemoteControlApiInterface
     */
    apiCommandsUpdate(id: number, remoteControlCommandRequest: RemoteControlCommandRequest, options?: any): AxiosPromise<RemoteControlCommand>;

    /**
     * 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemoteControlApiInterface
     */
    apiGcodeFilesList(page?: number, options?: any): AxiosPromise<PaginatedGcodeFileList>;

    /**
     * 
     * @param {string} id 
     * @param {string} [name] 
     * @param {any} [file] 
     * @param {string} [fileHash] 
     * @param {string} [octoprintDevice] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemoteControlApiInterface
     */
    apiGcodeFilesPartialUpdate(id: string, name?: string, file?: any, fileHash?: string, octoprintDevice?: string, options?: any): AxiosPromise<GcodeFile>;

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemoteControlApiInterface
     */
    apiGcodeFilesRetrieve(id: string, options?: any): AxiosPromise<GcodeFile>;

    /**
     * 
     * @param {string} id 
     * @param {string} name 
     * @param {any} file 
     * @param {string} fileHash 
     * @param {string} octoprintDevice 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemoteControlApiInterface
     */
    apiGcodeFilesUpdate(id: string, name: string, file: any, fileHash: string, octoprintDevice: string, options?: any): AxiosPromise<GcodeFile>;

    /**
     * 
     * @param {OctoPrintDeviceRequest} octoPrintDeviceRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemoteControlApiInterface
     */
    apiOctoprintDevicesCreate(octoPrintDeviceRequest: OctoPrintDeviceRequest, options?: any): AxiosPromise<OctoPrintDevice>;

    /**
     * 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemoteControlApiInterface
     */
    apiOctoprintDevicesList(page?: number, options?: any): AxiosPromise<PaginatedOctoPrintDeviceList>;

    /**
     * 
     * @param {number} id A unique integer value identifying this octo print device.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemoteControlApiInterface
     */
    apiOctoprintDevicesRetrieve(id: number, options?: any): AxiosPromise<OctoPrintDevice>;

    /**
     * 
     * @param {PrintSessionRequest} printSessionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemoteControlApiInterface
     */
    apiPrintSessionsCreate(printSessionRequest: PrintSessionRequest, options?: any): AxiosPromise<PrintSession>;

    /**
     * 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemoteControlApiInterface
     */
    apiPrintSessionsList(page?: number, options?: any): AxiosPromise<PaginatedPrintSessionList>;

    /**
     * 
     * @param {string} session 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemoteControlApiInterface
     */
    apiPrintSessionsRetrieve(session: string, options?: any): AxiosPromise<PrintSession>;

    /**
     * 
     * @param {string} [name] 
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [user] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemoteControlApiInterface
     */
    apiPrinterProfilesList(name?: string, page?: number, user?: number, options?: any): AxiosPromise<PaginatedPrinterProfileList>;

    /**
     * 
     * @param {number} id A unique integer value identifying this printer profile.
     * @param {PatchedPrinterProfileRequest} [patchedPrinterProfileRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemoteControlApiInterface
     */
    apiPrinterProfilesPartialUpdate(id: number, patchedPrinterProfileRequest?: PatchedPrinterProfileRequest, options?: any): AxiosPromise<PrinterProfile>;

    /**
     * 
     * @param {number} id A unique integer value identifying this printer profile.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemoteControlApiInterface
     */
    apiPrinterProfilesRetrieve(id: number, options?: any): AxiosPromise<PrinterProfile>;

    /**
     * 
     * @param {number} id A unique integer value identifying this printer profile.
     * @param {PrinterProfileRequest} printerProfileRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemoteControlApiInterface
     */
    apiPrinterProfilesUpdate(id: number, printerProfileRequest: PrinterProfileRequest, options?: any): AxiosPromise<PrinterProfile>;

    /**
     * 
     * @param {string} name 
     * @param {any} file 
     * @param {string} fileHash 
     * @param {string} octoprintDevice 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemoteControlApiInterface
     */
    gcodeFilesCreate(name: string, file: any, fileHash: string, octoprintDevice: string, options?: any): AxiosPromise<GcodeFile>;

    /**
     * 
     * @param {string} name 
     * @param {any} file 
     * @param {string} fileHash 
     * @param {string} octoprintDevice 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemoteControlApiInterface
     */
    gcodeFilesUpdateOrCreate(name: string, file: any, fileHash: string, octoprintDevice: string, options?: any): AxiosPromise<GcodeFile>;

    /**
     * 
     * @param {number} id A unique integer value identifying this octo print device.
     * @param {PatchedOctoPrintDeviceRequest} [patchedOctoPrintDeviceRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemoteControlApiInterface
     */
    octoprintDevicesPartialUpdate(id: number, patchedOctoPrintDeviceRequest?: PatchedOctoPrintDeviceRequest, options?: any): AxiosPromise<OctoPrintDevice>;

    /**
     * 
     * @param {number} id A unique integer value identifying this octo print device.
     * @param {OctoPrintDeviceRequest} octoPrintDeviceRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemoteControlApiInterface
     */
    octoprintDevicesUpdate(id: number, octoPrintDeviceRequest: OctoPrintDeviceRequest, options?: any): AxiosPromise<OctoPrintDevice>;

    /**
     * 
     * @param {OctoPrintDeviceRequest} octoPrintDeviceRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemoteControlApiInterface
     */
    octoprintDevicesUpdateOrCreate(octoPrintDeviceRequest: OctoPrintDeviceRequest, options?: any): AxiosPromise<OctoPrintDevice>;

    /**
     * 
     * @param {string} session 
     * @param {PatchedPrintSessionRequest} [patchedPrintSessionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemoteControlApiInterface
     */
    printSessionPartialUpdate(session: string, patchedPrintSessionRequest?: PatchedPrintSessionRequest, options?: any): AxiosPromise<PrintSession>;

    /**
     * 
     * @param {string} session 
     * @param {PrintSessionRequest} printSessionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemoteControlApiInterface
     */
    printSessionUpdate(session: string, printSessionRequest: PrintSessionRequest, options?: any): AxiosPromise<PrintSession>;

    /**
     * 
     * @param {PrinterProfileRequest} printerProfileRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemoteControlApiInterface
     */
    printerProfilesCreate(printerProfileRequest: PrinterProfileRequest, options?: any): AxiosPromise<PrintSession>;

    /**
     * 
     * @param {PrinterProfileRequest} printerProfileRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemoteControlApiInterface
     */
    printerProfilesUpdateOrCreate(printerProfileRequest: PrinterProfileRequest, options?: any): AxiosPromise<PrinterProfile>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemoteControlApiInterface
     */
    validCommandsRetrieve(options?: any): AxiosPromise<string>;

}

/**
 * RemoteControlApi - object-oriented interface
 * @export
 * @class RemoteControlApi
 * @extends {BaseAPI}
 */
export class RemoteControlApi extends BaseAPI implements RemoteControlApiInterface {
    /**
     * 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemoteControlApi
     */
    public apiCommandsList(page?: number, options?: any) {
        return RemoteControlApiFp(this.configuration).apiCommandsList(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this remote control command.
     * @param {PatchedRemoteControlCommandRequest} [patchedRemoteControlCommandRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemoteControlApi
     */
    public apiCommandsPartialUpdate(id: number, patchedRemoteControlCommandRequest?: PatchedRemoteControlCommandRequest, options?: any) {
        return RemoteControlApiFp(this.configuration).apiCommandsPartialUpdate(id, patchedRemoteControlCommandRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this remote control command.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemoteControlApi
     */
    public apiCommandsRetrieve(id: number, options?: any) {
        return RemoteControlApiFp(this.configuration).apiCommandsRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this remote control command.
     * @param {RemoteControlCommandRequest} remoteControlCommandRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemoteControlApi
     */
    public apiCommandsUpdate(id: number, remoteControlCommandRequest: RemoteControlCommandRequest, options?: any) {
        return RemoteControlApiFp(this.configuration).apiCommandsUpdate(id, remoteControlCommandRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemoteControlApi
     */
    public apiGcodeFilesList(page?: number, options?: any) {
        return RemoteControlApiFp(this.configuration).apiGcodeFilesList(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {string} [name] 
     * @param {any} [file] 
     * @param {string} [fileHash] 
     * @param {string} [octoprintDevice] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemoteControlApi
     */
    public apiGcodeFilesPartialUpdate(id: string, name?: string, file?: any, fileHash?: string, octoprintDevice?: string, options?: any) {
        return RemoteControlApiFp(this.configuration).apiGcodeFilesPartialUpdate(id, name, file, fileHash, octoprintDevice, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemoteControlApi
     */
    public apiGcodeFilesRetrieve(id: string, options?: any) {
        return RemoteControlApiFp(this.configuration).apiGcodeFilesRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {string} name 
     * @param {any} file 
     * @param {string} fileHash 
     * @param {string} octoprintDevice 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemoteControlApi
     */
    public apiGcodeFilesUpdate(id: string, name: string, file: any, fileHash: string, octoprintDevice: string, options?: any) {
        return RemoteControlApiFp(this.configuration).apiGcodeFilesUpdate(id, name, file, fileHash, octoprintDevice, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OctoPrintDeviceRequest} octoPrintDeviceRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemoteControlApi
     */
    public apiOctoprintDevicesCreate(octoPrintDeviceRequest: OctoPrintDeviceRequest, options?: any) {
        return RemoteControlApiFp(this.configuration).apiOctoprintDevicesCreate(octoPrintDeviceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemoteControlApi
     */
    public apiOctoprintDevicesList(page?: number, options?: any) {
        return RemoteControlApiFp(this.configuration).apiOctoprintDevicesList(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this octo print device.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemoteControlApi
     */
    public apiOctoprintDevicesRetrieve(id: number, options?: any) {
        return RemoteControlApiFp(this.configuration).apiOctoprintDevicesRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PrintSessionRequest} printSessionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemoteControlApi
     */
    public apiPrintSessionsCreate(printSessionRequest: PrintSessionRequest, options?: any) {
        return RemoteControlApiFp(this.configuration).apiPrintSessionsCreate(printSessionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemoteControlApi
     */
    public apiPrintSessionsList(page?: number, options?: any) {
        return RemoteControlApiFp(this.configuration).apiPrintSessionsList(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} session 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemoteControlApi
     */
    public apiPrintSessionsRetrieve(session: string, options?: any) {
        return RemoteControlApiFp(this.configuration).apiPrintSessionsRetrieve(session, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [name] 
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [user] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemoteControlApi
     */
    public apiPrinterProfilesList(name?: string, page?: number, user?: number, options?: any) {
        return RemoteControlApiFp(this.configuration).apiPrinterProfilesList(name, page, user, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this printer profile.
     * @param {PatchedPrinterProfileRequest} [patchedPrinterProfileRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemoteControlApi
     */
    public apiPrinterProfilesPartialUpdate(id: number, patchedPrinterProfileRequest?: PatchedPrinterProfileRequest, options?: any) {
        return RemoteControlApiFp(this.configuration).apiPrinterProfilesPartialUpdate(id, patchedPrinterProfileRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this printer profile.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemoteControlApi
     */
    public apiPrinterProfilesRetrieve(id: number, options?: any) {
        return RemoteControlApiFp(this.configuration).apiPrinterProfilesRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this printer profile.
     * @param {PrinterProfileRequest} printerProfileRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemoteControlApi
     */
    public apiPrinterProfilesUpdate(id: number, printerProfileRequest: PrinterProfileRequest, options?: any) {
        return RemoteControlApiFp(this.configuration).apiPrinterProfilesUpdate(id, printerProfileRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} name 
     * @param {any} file 
     * @param {string} fileHash 
     * @param {string} octoprintDevice 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemoteControlApi
     */
    public gcodeFilesCreate(name: string, file: any, fileHash: string, octoprintDevice: string, options?: any) {
        return RemoteControlApiFp(this.configuration).gcodeFilesCreate(name, file, fileHash, octoprintDevice, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} name 
     * @param {any} file 
     * @param {string} fileHash 
     * @param {string} octoprintDevice 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemoteControlApi
     */
    public gcodeFilesUpdateOrCreate(name: string, file: any, fileHash: string, octoprintDevice: string, options?: any) {
        return RemoteControlApiFp(this.configuration).gcodeFilesUpdateOrCreate(name, file, fileHash, octoprintDevice, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this octo print device.
     * @param {PatchedOctoPrintDeviceRequest} [patchedOctoPrintDeviceRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemoteControlApi
     */
    public octoprintDevicesPartialUpdate(id: number, patchedOctoPrintDeviceRequest?: PatchedOctoPrintDeviceRequest, options?: any) {
        return RemoteControlApiFp(this.configuration).octoprintDevicesPartialUpdate(id, patchedOctoPrintDeviceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this octo print device.
     * @param {OctoPrintDeviceRequest} octoPrintDeviceRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemoteControlApi
     */
    public octoprintDevicesUpdate(id: number, octoPrintDeviceRequest: OctoPrintDeviceRequest, options?: any) {
        return RemoteControlApiFp(this.configuration).octoprintDevicesUpdate(id, octoPrintDeviceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OctoPrintDeviceRequest} octoPrintDeviceRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemoteControlApi
     */
    public octoprintDevicesUpdateOrCreate(octoPrintDeviceRequest: OctoPrintDeviceRequest, options?: any) {
        return RemoteControlApiFp(this.configuration).octoprintDevicesUpdateOrCreate(octoPrintDeviceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} session 
     * @param {PatchedPrintSessionRequest} [patchedPrintSessionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemoteControlApi
     */
    public printSessionPartialUpdate(session: string, patchedPrintSessionRequest?: PatchedPrintSessionRequest, options?: any) {
        return RemoteControlApiFp(this.configuration).printSessionPartialUpdate(session, patchedPrintSessionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} session 
     * @param {PrintSessionRequest} printSessionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemoteControlApi
     */
    public printSessionUpdate(session: string, printSessionRequest: PrintSessionRequest, options?: any) {
        return RemoteControlApiFp(this.configuration).printSessionUpdate(session, printSessionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PrinterProfileRequest} printerProfileRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemoteControlApi
     */
    public printerProfilesCreate(printerProfileRequest: PrinterProfileRequest, options?: any) {
        return RemoteControlApiFp(this.configuration).printerProfilesCreate(printerProfileRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PrinterProfileRequest} printerProfileRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemoteControlApi
     */
    public printerProfilesUpdateOrCreate(printerProfileRequest: PrinterProfileRequest, options?: any) {
        return RemoteControlApiFp(this.configuration).printerProfilesUpdateOrCreate(printerProfileRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemoteControlApi
     */
    public validCommandsRetrieve(options?: any) {
        return RemoteControlApiFp(this.configuration).validCommandsRetrieve(options).then((request) => request(this.axios, this.basePath));
    }
}


