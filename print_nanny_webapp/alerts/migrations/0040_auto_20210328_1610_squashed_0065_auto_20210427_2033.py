# Generated by Django 3.1.7 on 2021-04-28 21:13

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import print_nanny_webapp.alerts.models
import print_nanny_webapp.utils.fields


class Migration(migrations.Migration):

    dependencies = [
        ("contenttypes", "0002_remove_content_type_name"),
        ("alerts", "0034_defectalert_dataframe_squashed_0039_alert_sent"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name="defectalert",
            name="print_session",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="remote_control.printsession",
            ),
        ),
        migrations.RemoveField(
            model_name="alert",
            name="alert_method",
        ),
        migrations.AddField(
            model_name="alert",
            name="alert_methods",
            field=print_nanny_webapp.utils.fields.ChoiceArrayField(
                base_field=models.CharField(
                    choices=[
                        ("UI", "Receive Print Nanny UI notifications"),
                        ("EMAIL", "Receive email notifications"),
                        ("DISCORD", "Receive notifications through Discord"),
                    ],
                    max_length=255,
                ),
                blank=True,
                default=("UI", "EMAIL"),
                size=None,
            ),
        ),
        migrations.AlterField(
            model_name="alertsettings",
            name="alert_methods",
            field=print_nanny_webapp.utils.fields.ChoiceArrayField(
                base_field=models.CharField(
                    choices=[
                        ("UI", "Receive Print Nanny UI notifications"),
                        ("EMAIL", "Receive email notifications"),
                        ("DISCORD", "Receive notifications through Discord"),
                    ],
                    max_length=255,
                ),
                blank=True,
                default=("UI", "EMAIL"),
                size=None,
            ),
        ),
        migrations.AlterField(
            model_name="alert",
            name="alert_type",
            field=models.CharField(
                choices=[
                    ("COMMAND", "Remote command status updates"),
                    ("PRINT_PROGRESS", "Percentage-based print progress"),
                    (
                        "MANUAL_VIDEO_UPLOAD",
                        "Manually-uploaded video is ready for review",
                    ),
                    ("DEFECT", "Defect detected in print"),
                    ("PRINT_SESSION_DONE", "Print job is finished"),
                ],
                max_length=255,
            ),
        ),
        migrations.AlterField(
            model_name="alertsettings",
            name="alert_type",
            field=models.CharField(
                choices=[
                    ("COMMAND", "Remote command status updates"),
                    ("PRINT_PROGRESS", "Percentage-based print progress"),
                    (
                        "MANUAL_VIDEO_UPLOAD",
                        "Manually-uploaded video is ready for review",
                    ),
                    ("DEFECT", "Defect detected in print"),
                    ("PRINT_SESSION_DONE", "Print job is finished"),
                ],
                max_length=255,
            ),
        ),
        migrations.CreateModel(
            name="PrintSessionAlertSettings",
            fields=[
                (
                    "alertsettings_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="alerts.alertsettings",
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("alerts.alertsettings",),
        ),
        migrations.CreateModel(
            name="PrintSessionAlert",
            fields=[
                (
                    "alert_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="alerts.alert",
                    ),
                ),
                (
                    "print_session",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="remote_control.printsession",
                    ),
                ),
                (
                    "annotated_video",
                    models.FileField(
                        upload_to=print_nanny_webapp.alerts.models._upload_to
                    ),
                ),
                (
                    "alert_subtype",
                    models.CharField(
                        choices=[
                            ("SUCCESS", "Print session finished successfully"),
                            ("FAILURE", "Failure detected in print session"),
                        ],
                        default="SUCCESS",
                        max_length=36,
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("alerts.alert",),
        ),
        migrations.RemoveField(
            model_name="defectalertsettings",
            name="alertsettings_ptr",
        ),
        migrations.RemoveField(
            model_name="defectalertsettings",
            name="user",
        ),
        migrations.AlterField(
            model_name="alert",
            name="alert_type",
            field=models.CharField(
                choices=[
                    ("COMMAND", "Remote command status updates"),
                    ("PRINT_PROGRESS", "Percentage-based print progress"),
                    (
                        "MANUAL_VIDEO_UPLOAD",
                        "Manually-uploaded video is ready for review",
                    ),
                    ("PRINT_SESSION", "Print job is finished"),
                ],
                max_length=255,
            ),
        ),
        migrations.AlterField(
            model_name="alertsettings",
            name="alert_type",
            field=models.CharField(
                choices=[
                    ("COMMAND", "Remote command status updates"),
                    ("PRINT_PROGRESS", "Percentage-based print progress"),
                    (
                        "MANUAL_VIDEO_UPLOAD",
                        "Manually-uploaded video is ready for review",
                    ),
                    ("PRINT_SESSION", "Print job is finished"),
                ],
                max_length=255,
            ),
        ),
        migrations.DeleteModel(
            name="DefectAlert",
        ),
        migrations.DeleteModel(
            name="DefectAlertSettings",
        ),
        migrations.AddConstraint(
            model_name="printsessionalert",
            constraint=models.UniqueConstraint(
                fields=("print_session", "alert_subtype"),
                name="unique_alert_type_per_print_session",
            ),
        ),
        migrations.RemoveField(
            model_name="alert",
            name="dismissed",
        ),
        migrations.AddField(
            model_name="printsessionalert",
            name="needs_review",
            field=models.BooleanField(default=False),
        ),
        migrations.AlterField(
            model_name="alertsettings",
            name="alert_methods",
            field=print_nanny_webapp.utils.fields.ChoiceArrayField(
                base_field=models.CharField(
                    choices=[
                        ("UI", "Receive Print Nanny UI notifications"),
                        ("EMAIL", "Receive email notifications"),
                        ("DISCORD", "Receive notifications through Discord"),
                        ("GEEKS3D", "Receive notifications in 3D Geeks mobile app"),
                    ],
                    max_length=255,
                ),
                blank=True,
                default=("UI", "EMAIL"),
                size=None,
            ),
        ),
        migrations.RemoveField(
            model_name="alert",
            name="alert_methods",
        ),
        migrations.AlterField(
            model_name="alertsettings",
            name="alert_methods",
            field=print_nanny_webapp.utils.fields.ChoiceArrayField(
                base_field=models.CharField(
                    choices=[
                        ("UI", "Receive Print Nanny UI notifications"),
                        ("EMAIL", "Receive email notifications"),
                        ("DISCORD", "Receive notifications through Discord"),
                        (
                            "PARTNER_3DGEEKS",
                            "Receive notifications in 3D Geeks mobile app",
                        ),
                    ],
                    max_length=255,
                ),
                blank=True,
                default=("UI", "EMAIL"),
                size=None,
            ),
        ),
        migrations.AddField(
            model_name="alert",
            name="alert_method",
            field=models.CharField(
                choices=[
                    ("UI", "Receive Print Nanny UI notifications"),
                    ("EMAIL", "Receive email notifications"),
                    ("DISCORD", "Receive notifications through Discord"),
                    ("PARTNER_3DGEEKS", "Receive notifications in 3D Geeks mobile app"),
                ],
                default="EMAIL",
                max_length=255,
            ),
        ),
        migrations.AlterField(
            model_name="alertsettings",
            name="enabled",
            field=models.BooleanField(
                default=True, help_text="Enable or disable this alert type"
            ),
        ),
        migrations.AlterField(
            model_name="remotecontrolcommandalertsettings",
            name="monitoring_start",
            field=print_nanny_webapp.utils.fields.ChoiceArrayField(
                base_field=models.CharField(
                    choices=[
                        ("RECEIVED", "Command received by device"),
                        ("FAILED", "Command failed"),
                        ("SUCCESS", "Command succeeded"),
                    ],
                    max_length=255,
                ),
                blank=True,
                default=("FAILED",),
                help_text="Fires on <strong>MonitoringStop</strong> updates. Helpful if you want to confirm monitoring started without a problem.",
                size=None,
            ),
        ),
        migrations.AlterField(
            model_name="remotecontrolcommandalertsettings",
            name="monitoring_stop",
            field=print_nanny_webapp.utils.fields.ChoiceArrayField(
                base_field=models.CharField(
                    choices=[
                        ("RECEIVED", "Command received by device"),
                        ("FAILED", "Command failed"),
                        ("SUCCESS", "Command succeeded"),
                    ],
                    max_length=255,
                ),
                blank=True,
                default=("FAILED",),
                help_text="Fires on <strong>MonitoringStop<strong> updates. \n Helps debug unexpected Print Nanny crashes.",
                size=None,
            ),
        ),
        migrations.AlterField(
            model_name="remotecontrolcommandalertsettings",
            name="move_nozzle",
            field=print_nanny_webapp.utils.fields.ChoiceArrayField(
                base_field=models.CharField(
                    choices=[
                        ("RECEIVED", "Command received by device"),
                        ("FAILED", "Command failed"),
                        ("SUCCESS", "Command succeeded"),
                    ],
                    max_length=255,
                ),
                blank=True,
                default=("FAILED",),
                help_text="Fires on <strong>MoveNozzle</strong>command status changes. Helpful for debugging connectivity between Print Nanny and OctoPrint",
                size=None,
            ),
        ),
        migrations.AlterField(
            model_name="remotecontrolcommandalertsettings",
            name="print_pause",
            field=print_nanny_webapp.utils.fields.ChoiceArrayField(
                base_field=models.CharField(
                    choices=[
                        ("RECEIVED", "Command received by device"),
                        ("FAILED", "Command failed"),
                        ("SUCCESS", "Command succeeded"),
                    ],
                    max_length=255,
                ),
                blank=True,
                default=("FAILED",),
                help_text="Fires on <strong>PausePrint</strong> command status changes. Helpful for verifying a print was paused successfully.",
                size=None,
            ),
        ),
        migrations.AlterField(
            model_name="remotecontrolcommandalertsettings",
            name="print_resume",
            field=print_nanny_webapp.utils.fields.ChoiceArrayField(
                base_field=models.CharField(
                    choices=[
                        ("RECEIVED", "Command received by device"),
                        ("FAILED", "Command failed"),
                        ("SUCCESS", "Command succeeded"),
                    ],
                    max_length=255,
                ),
                blank=True,
                default=("FAILED",),
                help_text="Fires on <strong>ResumePrint</strong> command status changes Helpful for verifying a print was resumed.",
                size=None,
            ),
        ),
        migrations.AlterField(
            model_name="remotecontrolcommandalertsettings",
            name="print_start",
            field=print_nanny_webapp.utils.fields.ChoiceArrayField(
                base_field=models.CharField(
                    choices=[
                        ("RECEIVED", "Command received by device"),
                        ("FAILED", "Command failed"),
                        ("SUCCESS", "Command succeeded"),
                    ],
                    max_length=255,
                ),
                blank=True,
                default=("FAILED",),
                help_text="Fires on <strong>StartPrint</strong> updates. Get notified as soon as a print job finishes. ",
                size=None,
            ),
        ),
        migrations.AlterField(
            model_name="remotecontrolcommandalertsettings",
            name="print_stop",
            field=print_nanny_webapp.utils.fields.ChoiceArrayField(
                base_field=models.CharField(
                    choices=[
                        ("RECEIVED", "Command received by device"),
                        ("FAILED", "Command failed"),
                        ("SUCCESS", "Command succeeded"),
                    ],
                    max_length=255,
                ),
                blank=True,
                default=("FAILED",),
                help_text="Fires on <strong>PrintStart</strong> command status changes. Helpful for verifying a print job started without a problem.",
                size=None,
            ),
        ),
        migrations.CreateModel(
            name="AlertMethodSettings",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_dt", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_dt", models.DateTimeField(auto_now=True, db_index=True)),
                (
                    "alert_method",
                    models.CharField(
                        choices=[
                            ("UI", "Receive Print Nanny UI notifications"),
                            ("EMAIL", "Receive email notifications"),
                            ("DISCORD", "Receive notifications through Discord"),
                            (
                                "PARTNER_3DGEEKS",
                                "Receive notifications in 3D Geeks mobile app",
                            ),
                        ],
                        max_length=255,
                    ),
                ),
                (
                    "enabled",
                    models.BooleanField(
                        choices=[
                            ("UI", "Receive Print Nanny UI notifications"),
                            ("EMAIL", "Receive email notifications"),
                            ("DISCORD", "Receive notifications through Discord"),
                            (
                                "PARTNER_3DGEEKS",
                                "Receive notifications in 3D Geeks mobile app",
                            ),
                        ],
                        help_text="Enable or disable this alert method",
                        max_length=255,
                    ),
                ),
                (
                    "polymorphic_ctype",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="polymorphic_alerts.alertmethodsettings_set+",
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
        ),
        migrations.DeleteModel(
            name="RemoteControlCommandAlertSettings",
        ),
        migrations.DeleteModel(
            name="PrintSessionAlertSettings",
        ),
        migrations.DeleteModel(
            name="ProgressAlertSettings",
        ),
        migrations.DeleteModel(
            name="AlertSettings",
        ),
        migrations.CreateModel(
            name="AlertEventSettings",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_dt", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_dt", models.DateTimeField(auto_now=True, db_index=True)),
                ("enabled", models.BooleanField(default=True)),
                (
                    "event_type",
                    models.CharField(
                        choices=[
                            ("PrintProgress", "Receive print progress notifications"),
                            ("PrintHealth", "Receive print health alerts"),
                            (
                                "PrintStatus",
                                "Receive updates to print status (started, paused, resumed, cancelling, cancelled, failed)",
                            ),
                        ],
                        max_length=255,
                    ),
                ),
                (
                    "polymorphic_ctype",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="polymorphic_alerts.alerteventsettings_set+",
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE, to="users.user"
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
        ),
        migrations.RemoveField(
            model_name="alert",
            name="alert_type",
        ),
        migrations.AddField(
            model_name="alert",
            name="event_type",
            field=models.CharField(
                choices=[
                    ("PrintProgress", "Receive print progress notifications"),
                    ("PrintHealth", "Receive print health alerts"),
                    (
                        "PrintStatus",
                        "Receive updates to print status (started, paused, resumed, cancelling, cancelled, failed)",
                    ),
                ],
                max_length=255,
                null=True,
            ),
        ),
        migrations.DeleteModel(
            name="DiscordMethodSettings",
        ),
        migrations.CreateModel(
            name="PrintProgressEventSettings",
            fields=[
                (
                    "on_progress_percent",
                    models.IntegerField(
                        default=25,
                        help_text="Progress notification interval. Example: 25 will notify you at 25%, 50%, 75%, and 100% progress",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("alerts.alerteventsettings",),
        ),
        migrations.DeleteModel(
            name="AlertEventSettings",
        ),
        migrations.DeleteModel(
            name="PrintProgressEventSettings",
        ),
    ]
